(()=>{"use strict";var t,e,n,o,i,s,r={170:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),i=n.n(o),s=n(645),r=n.n(s)()(i());r.push([t.id,'.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}',"",{version:3,sources:["webpack://./css/styles.css"],names:[],mappings:"AAAA;;IAEI,uBAAuB;IACvB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,wEAAwE;IACxE,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,kBAAkB;IAClB,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,6BAA6B;IAC7B,aAAa;IACb,wEAAwE;IACxE,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;IAChB,wEAAwE;AAC5E;AACA;IACI,cAAc;AAClB;AACA;IACI,yBAAyB;IACzB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,0BAA0B;AAC9B;AACA;IACI,YAAY;AAChB",sourcesContent:['.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}'],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(o)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(i[r]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);o&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,i=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var o,i,s=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(o=n.next()).done)&&(s.push(o.value),!e||s.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw i}}return s}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=i[1],r=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),h=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[s].concat(h).concat([c]).join("\n")}return[s].join("\n")}},379:(t,e,n)=>{var o,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function r(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],i=0;i<t.length;i++){var a=t[i],l=e.base?a[0]+e.base:a[0],c=n[l]||0,h="".concat(l," ").concat(c);n[l]=c+1;var p=r(h),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(s[p].references++,s[p].updater(u)):s.push({identifier:h,updater:A(u,e),references:1}),o.push(h)}return o}function l(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var s=n.nc;s&&(o.nonce=s)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var r=i(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var s=document.createTextNode(i),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function u(t,e,n){var o=n.css,i=n.media,s=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,f=0;function A(t,e){var n,o,i;if(e.singleton){var s=f++;n=d||(d=l(e)),o=p.bind(null,n,s,!1),i=p.bind(null,n,s,!0)}else n=l(e),o=u.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=r(n[o]);s[i].references--}for(var l=a(t,e),c=0;c<n.length;c++){var h=r(n[c]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}n=l}}}},620:(t,e,n)=>{e.pG=void 0;const o=n(173);e.ZP=o.default;var i=n(415);Object.defineProperty(e,"pG",{enumerable:!0,get:function(){return i.PhotonReverse}})},173:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(282),i=n(415),s=n(64);e.default=class{constructor(t={},e={},n={}){this.searchControlOptions=t,this.geocodingOptions=e,this.popupOptions=n}getDefaultPosition(){return"top-left"}onAdd(t){return this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.searchBox=document.createElement("input"),this.controlContainer.appendChild(this.searchBox),this.photonGeocoding=new i.PhotonGeocoding(t,this.geocodingOptions),this.popupManager=new s.default(t,this.popupOptions),this.searchControlOptions.onSelected||(this.searchControlOptions.onSelected=this.onSelected.bind(this)),this.searchControlOptions.doSearch=this.photonGeocoding.geocode.bind(this.photonGeocoding),this.searchControl=new o.default(this.searchBox,this.searchControlOptions),this.searchControl.initialize(),this.controlContainer}onSelected(t){this.popupManager.add(t.feature)}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.searchBox&&this.controlContainer.parentNode.removeChild(this.controlContainer)}}},64:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(507);e.default=class{constructor(t,e={}){this.marker=null,this.map=t,this.options=e}_createContent(t){const e=t.properties;if(!e)return"";let n="";e.name&&(n=e.name);const o=[];return["housenumber","street","locality","city","district","state","postcode","country"].forEach((t=>{e[t]&&o.push(e[t])})),o.length>0&&(n+=`\n        <br>\n        ${o.join(",")}\n        `),n}createContent(t){return this.options.createContent?this.options.createContent(t):this._createContent(t)}add(t){const e=(new o.Popup).setHTML(this.createContent(t)).setMaxWidth("300px");this.marker&&this.marker.remove();const n=t.geometry.coordinates;this.marker=(new o.Marker).setLngLat(n).setPopup(e).addTo(this.map),this.marker.togglePopup();let i=this.map.getZoom();const s=this.options.popupZoomLevel?this.options.popupZoomLevel:14;i<s&&(i=s),this.map.flyTo({center:n,zoom:i})}clear(){var t;null===(t=this.marker)||void 0===t||t.remove(),this.marker=null}}},80:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,s){function r(t){try{l(o.next(t))}catch(t){s(t)}}function a(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.url=t}request(t){return n(this,void 0,void 0,(function*(){const e=`${this.url}${Object.keys(t).map((e=>`${e}=${t[e]}`)).join("&")}`;return new Promise(((t,n)=>{const o=new XMLHttpRequest;o.open("GET",e),o.onload=()=>{if(200===o.status){const e=o.responseText,n=JSON.parse(e);t(n)}else n(o.statusText)},o.send()}))}))}}},23:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(80);e.default=class{constructor(t,e){this.options={url:"https://photon.komoot.io/api?",limit:5,osm_tag:void 0,lang:void 0,bbox:[],includePosition:!0},this.map=t,e&&(this.options=Object.assign(this.options,e))}geocode(t,e){var n;if(!this.options.url)throw new Error("No url");const i=this.map.getCenter(),s=this.map.getZoom()?null===(n=this.map)||void 0===n?void 0:n.getZoom():14,r=new o.default(this.options.url),a={q:t,limit:this.options.limit,zoom:Math.floor(s)};this.options.includePosition&&(a.lat=null==i?void 0:i.lat,a.lon=null==i?void 0:i.lng),this.options.bbox&&4===this.options.bbox.length&&(a.bbox=this.options.bbox.join(",")),this.options.osm_tag&&(a.osm_tag=this.options.osm_tag),this.options.lang&&(a.lang=this.options.lang),r.request(a).then((t=>{e(t)}))}}},415:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PhotonReverse=e.PhotonGeocoding=void 0;const o=n(23);e.PhotonGeocoding=o.default;const i=n(42);e.PhotonReverse=i.default},42:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,s){function r(t){try{l(o.next(t))}catch(t){s(t)}}function a(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=n(80);e.default=class{constructor(t){this.options={url:"https://photon.komoot.io/reverse?",limit:5,osm_tag:void 0,lang:void 0},t&&(this.options=Object.assign(this.options,t))}reverse(t,e){return o(this,void 0,void 0,(function*(){if(!this.options.url)throw new Error("No url");const n=new i.default(this.options.url),o={limit:this.options.limit,lat:e,lon:t};return this.options.osm_tag&&(o.osm_tag=this.options.osm_tag),this.options.lang&&(o.lang=this.options.lang),yield n.request(o)}))}}},282:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e){this.options={placeholder:"Start typing...",minChar:3,submitDelay:300,noResultLabel:"No result",feedbackUrl:"https://github.com/komoot/photon/issues",feedbackLabel:"Feedback",onSelected:void 0,doSearch:void 0},this.CACHE="",this.RESULTS=[],this.KEYS={LEFT:37,UP:38,RIGHT:39,DOWN:40,TAB:9,RETURN:13,ESC:27,APPLE:91,SHIFT:16,ALT:17,CTRL:18},this.input=t,e&&(this.options=Object.assign(this.options,e))}get CURRENT(){return this._CURRENT}set CURRENT(t){"object"==typeof t&&(t=this.resultToIndex(t)),this._CURRENT=t}initialize(){this.input.type="search",this.options.placeholder&&(this.input.placeholder=this.options.placeholder),this.input.autocomplete="off",this.input.autocorrect="off",this.input.classList.add("photon-input"),this.input.addEventListener("keydown",this.onKeyDown.bind(this)),this.input.addEventListener("input",this.onInput.bind(this)),this.input.addEventListener("blur",this.onBlur.bind(this)),this.input.addEventListener("focus",this.onFocus.bind(this)),this.createResultsContainer()}createResultsContainer(){this.resultsContainer=document.createElement("ul"),this.resultsContainer.classList.add("photon-autocomplete");const t=document.querySelector("body");null==t||t.appendChild(this.resultsContainer)}resizeContainer(){const t=this.getLeft(this.input),e=this.getTop(this.input)+this.input.offsetHeight/2;this.resultsContainer.style.left=`${t}px`,this.resultsContainer.style.top=`${e}px`;const n=this.options.width?this.options.width:this.input.offsetWidth-2;this.resultsContainer.style.width=`${n}px`}onKeyDown(t){switch(t.keyCode){case this.KEYS.TAB:null!==this.CURRENT&&this.setChoice(),t.stopPropagation();break;case this.KEYS.RETURN:t.stopPropagation(),this.setChoice();break;case this.KEYS.ESC:t.stopPropagation(),this.hide(),this.input.blur();break;case this.KEYS.DOWN:this.RESULTS.length>0&&(null!==this.CURRENT&&this.CURRENT<this.RESULTS.length-1?(this.CURRENT+=1,this.highlight()):null===this.CURRENT&&(this.CURRENT=0,this.highlight()));break;case this.KEYS.UP:this.CURRENT&&t.stopPropagation(),this.CURRENT&&this.RESULTS.length>0&&(this.CURRENT>0?(this.CURRENT-=1,this.highlight()):0===this.CURRENT&&this.highlight())}}onInput(){"number"==typeof this.submitDelay&&(window.clearTimeout(this.submitDelay),this.submitDelay=null),this.submitDelay=window.setTimeout(this.search.bind(this),this.options.submitDelay)}onBlur(){const t=this;setTimeout((()=>{t.hide()}),100)}onFocus(){this.input.select(),this.search()}clear(){this.RESULTS=[],this.CURRENT=0,this.CACHE="",this.resultsContainer.innerHTML=""}hide(){this.clear(),this.resultsContainer.style.display="none"}setChoice(){const t=this.RESULTS[this.CURRENT];t&&(this.hide(),this.onSelected(t),this.input.value="")}search(){const t=this.input.value,e=this.options.minChar&&t.length>=this.options.minChar;t&&e?`${t}''`!=`${this.CACHE}''`&&(this.CACHE=t,this._doSearch(t,this.handleResult.bind(this))):this.clear()}_doSearch(t,e){this.options.doSearch&&this.options.doSearch(t,e)}_onSelected(t){}onSelected(t){this.options.onSelected?this.options.onSelected(t):this._onSelected(t)}formatResult(t,e){var n,o,i,s;const r=document.createElement("strong");e.appendChild(r);const a=document.createElement("small");e.appendChild(a);const l=[],c=this.formatType(t);(null===(n=t.properties)||void 0===n?void 0:n.name)?r.innerHTML=t.properties.name:(null===(o=t.properties)||void 0===o?void 0:o.housenumber)&&(r.innerHTML=t.properties.housenumber,t.properties.street&&(r.innerHTML+=` ${t.properties.street}`)),c&&l.push(c),(null===(i=t.properties)||void 0===i?void 0:i.city)&&t.properties.city!==t.properties.name&&l.push(t.properties.city),(null===(s=t.properties)||void 0===s?void 0:s.country)&&l.push(t.properties.country),a.innerHTML=l.join(", ")}formatType(t){var e,n;return"yes"===(null===(e=t.properties)||void 0===e?void 0:e.osm_value)?t.properties.osm_key:null===(n=t.properties)||void 0===n?void 0:n.osm_value}createResult(t){const e=document.createElement("li");this.resultsContainer.appendChild(e),this.formatResult(t,e);const n={feature:t,el:e};return e.addEventListener("mouseover",this.onMouseover.bind(this,n)),e.addEventListener("mousedown",this.onMousedown.bind(this)),n}onMouseover(t){this.CURRENT=t,this.highlight()}onMousedown(){this.setChoice()}resultToIndex(t){let e=0;return this.RESULTS.forEach(((n,o)=>{n===t&&(e=o)})),e}handleResult(t){const e=this;if(this.clear(),this.resultsContainer.style.display="block",this.resizeContainer(),t.features.forEach((t=>{e.RESULTS.push(e.createResult(t))})),0===t.features.length){const t=document.createElement("li");t.classList.add("photon-no-result"),this.resultsContainer.appendChild(t),this.options.noResultLabel&&(t.innerHTML=this.options.noResultLabel)}if(this.options.feedbackUrl){const t=document.createElement("a");t.classList.add("photon-feedback"),this.resultsContainer.appendChild(t),t.href=`${this.options.feedbackUrl}`,this.options.feedbackLabel&&(t.innerHTML=this.options.feedbackLabel)}this.CURRENT=0,this.highlight()}highlight(){const t=this;this.RESULTS.forEach(((e,n)=>{n===t.CURRENT?e.el.classList.add("on"):e.el.classList.remove("on")}))}getLeft(t){let e=t.offsetLeft;for(t=t.offsetParent;t;)e+=t.offsetLeft,t=t.offsetParent;return e}getTop(t){let e=t.offsetTop;for(t=t.offsetParent;t;)e+=t.offsetTop,t=t.offsetParent;return e}}},507:t=>{t.exports=mapboxgl}},a={};function l(t){var e=a[t];if(void 0!==e)return e.exports;var n=a[t]={id:t,exports:{}};return r[t].call(n.exports,n,n.exports,l),n.exports}l.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return l.d(e,{a:e}),e},l.d=(t,e)=>{for(var n in e)l.o(e,n)&&!l.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},l.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=l(507),e=l.n(t),n=l(620),o=l(379),i=l.n(o),s=l(170),i()(s.Z,{insert:"head",singleton:!1}),s.Z.locals,(async()=>{const t=new(e().Map)({container:"map",style:"https://narwassco.github.io/naru/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new n.ZP,"top-left");const o=new n.pG,i=await o.reverse(35.8664039,-1.0861514);console.log(i)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2Nzcy9zdHlsZXMuY3NzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbGliL2luZGV4LnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbGliL21hcGJveC1waG90b24udHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvcG9wdXAtbWFuYWdlci50cyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2xpYi9yZXF1ZXN0L2Jhc2UudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvcmVxdWVzdC9nZW9jb2RpbmcudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvcmVxdWVzdC9pbmRleC50cyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2xpYi9yZXF1ZXN0L3JldmVyc2UudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvc2VhcmNoLWNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vZXh0ZXJuYWwgXCJtYXBib3hnbFwiIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vY3NzL3N0eWxlcy5jc3M/ZTgxYSIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2V4YW1wbGUvaW5kZXguanMiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm1lbW8iLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJQaG90b25SZXZlcnNlIiwic2VhcmNoQ29udHJvbE9wdGlvbnMiLCJnZW9jb2RpbmdPcHRpb25zIiwicG9wdXBPcHRpb25zIiwiZ2V0RGVmYXVsdFBvc2l0aW9uIiwib25BZGQiLCJjb250cm9sQ29udGFpbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwic2VhcmNoQm94IiwicGhvdG9uR2VvY29kaW5nIiwiUGhvdG9uR2VvY29kaW5nIiwicG9wdXBNYW5hZ2VyIiwib25TZWxlY3RlZCIsImRvU2VhcmNoIiwiZ2VvY29kZSIsInNlYXJjaENvbnRyb2wiLCJpbml0aWFsaXplIiwiY2hvaWNlIiwiZmVhdHVyZSIsIm9uUmVtb3ZlIiwibWFya2VyIiwiX2NyZWF0ZUNvbnRlbnQiLCJwcm9wcyIsInByb3BlcnRpZXMiLCJkZXRhaWxzIiwiY3JlYXRlQ29udGVudCIsInBvcHVwIiwiUG9wdXAiLCJzZXRIVE1MIiwic2V0TWF4V2lkdGgiLCJsbmdMYXQiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiTWFya2VyIiwic2V0TG5nTGF0Iiwic2V0UG9wdXAiLCJhZGRUbyIsInRvZ2dsZVBvcHVwIiwiY3VycmVudFpvb20iLCJnZXRab29tIiwiZGVmYXVsdFpvb20iLCJwb3B1cFpvb21MZXZlbCIsImZseVRvIiwiY2VudGVyIiwiem9vbSIsImNsZWFyIiwidXJsIiwicmVxdWVzdCIsInBhcmFtcyIsImsiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ubG9hZCIsInN0YXR1cyIsInJhdyIsInJlc3BvbnNlVGV4dCIsImdlb2pzb24iLCJwYXJzZSIsInN0YXR1c1RleHQiLCJzZW5kIiwibGltaXQiLCJvc21fdGFnIiwidW5kZWZpbmVkIiwibGFuZyIsImJib3giLCJpbmNsdWRlUG9zaXRpb24iLCJhc3NpZ24iLCJxdWVyeSIsImNhbGxiYWNrIiwiZ2V0Q2VudGVyIiwiYWpheCIsInEiLCJNYXRoIiwiZmxvb3IiLCJsYXQiLCJsb24iLCJsbmciLCJ0aGVuIiwiZmVhdHVyZXMiLCJyZXZlcnNlIiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsIm1pbkNoYXIiLCJzdWJtaXREZWxheSIsIm5vUmVzdWx0TGFiZWwiLCJmZWVkYmFja1VybCIsImZlZWRiYWNrTGFiZWwiLCJDQUNIRSIsIlJFU1VMVFMiLCJLRVlTIiwiTEVGVCIsIlVQIiwiUklHSFQiLCJET1dOIiwiVEFCIiwiUkVUVVJOIiwiRVNDIiwiQVBQTEUiLCJTSElGVCIsIkFMVCIsIkNUUkwiLCJfQ1VSUkVOVCIsInJlc3VsdFRvSW5kZXgiLCJ0eXBlIiwiYXV0b2NvbXBsZXRlIiwiYXV0b2NvcnJlY3QiLCJhZGRFdmVudExpc3RlbmVyIiwib25LZXlEb3duIiwib25JbnB1dCIsIm9uQmx1ciIsIm9uRm9jdXMiLCJjcmVhdGVSZXN1bHRzQ29udGFpbmVyIiwicmVzdWx0c0NvbnRhaW5lciIsImJvZHkiLCJyZXNpemVDb250YWluZXIiLCJsIiwiZ2V0TGVmdCIsInQiLCJnZXRUb3AiLCJvZmZzZXRIZWlnaHQiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImtleUNvZGUiLCJDVVJSRU5UIiwic2V0Q2hvaWNlIiwic3RvcFByb3BhZ2F0aW9uIiwiaGlkZSIsImJsdXIiLCJoaWdobGlnaHQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2VhcmNoIiwic2VsZiIsInNlbGVjdCIsImlubmVySFRNTCIsImRpc3BsYXkiLCJ2YWwiLCJfZG9TZWFyY2giLCJoYW5kbGVSZXN1bHQiLCJfb25TZWxlY3RlZCIsImNob2lzZSIsImZvcm1hdFJlc3VsdCIsImVsIiwidGl0bGUiLCJkZXRhaWxzQ29udGFpbmVyIiwiZm9ybWF0VHlwZSIsImhvdXNlbnVtYmVyIiwic3RyZWV0IiwiY2l0eSIsImNvdW50cnkiLCJvc21fdmFsdWUiLCJvc21fa2V5IiwiY3JlYXRlUmVzdWx0Iiwib25Nb3VzZW92ZXIiLCJvbk1vdXNlZG93biIsIm91dCIsIm5vcmVzdWx0IiwiZmVlZGJhY2siLCJocmVmIiwidG1wIiwib2Zmc2V0TGVmdCIsIm9mZnNldFBhcmVudCIsIm9mZnNldFRvcCIsIm1hcGJveGdsIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJjb250YWluZXIiLCJoYXNoIiwiYWRkQ29udHJvbCIsInJlY3ZlcnNlIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Im1HQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDIrQ0FBdy9DLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDhCQUE4QixNQUFRLEdBQUcsU0FBVyxxbUJBQXFtQixlQUFpQixDQUFDLDQrQ0FBdy9DLFdBQWEsTUFFNXVILFcsUUNDQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxLQUNORSxLQUFLLEtBS1ZQLEVBQUtRLEVBQUksU0FBVUMsRUFBU0MsRUFBWUMsR0FDZixpQkFBWkYsSUFF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LEVBQUV1UixFQUFZek4sS0FBU2lOLEVBQW9CL1EsRUFBRXRDLEVBQVNvRyxJQUM1RTNELE9BQU9xUixlQUFlOVQsRUFBU29HLEVBQUssQ0FBRTJOLFlBQVksRUFBTUMsSUFBS0gsRUFBV3pOLE1DSjNFaU4sRUFBb0IvUSxFQUFJLENBQUNnRCxFQUFLMk8sSUFBVXhSLE9BQU9DLFVBQVV3UixlQUFlbFMsS0FBS3NELEVBQUsyTyxHLHNEQ1FyRSxJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1MLFdDUmYsV0FFSSxNQUFNNVQsRUFBTSxJQUFJLFNBQWEsQ0FDekI4VCxVQUFXLE1BQ1hyTyxNQUFNLDhDQUNOdUYsT0FBUSxDQUFDLFVBQVcsU0FDcEJDLEtBQU0sR0FDTjhJLE1BQUssSUFFVC9ULEVBQUlnVSxXQUFXLElBQUksdUJBQThCLGFBQ2pEaFUsRUFBSWdVLFdBQVcsSUFBSSxLQUF3QixZQUUzQyxNQUFNQyxFQUFXLElBQUksS0FDZnhQLFFBQWV3UCxFQUFTekcsUUFBUSxZQUFhLFdBQ25EMEcsUUFBUUMsSUFBSTFQLElBZGhCLEkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWFwYm94Z2wtY3RybC1ncm91cCAubWFwYm94Z2wtZ2VvY29kZXItY3RybFxcbntcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5waG90b24taW5wdXQge1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnVsLnBob3Rvbi1hdXRvY29tcGxldGUge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbiAgICBib3gtc2hhZG93OiAwIDRweCA5cHggIzk5OTk5OTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaSB7XFxuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxZW07XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG59XFxuLnBob3Rvbi1hdXRvY29tcGxldGUgbGkgc3Ryb25nIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIGxpLm9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NmY2ZjZjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaS5waG90b24tbm8tcmVzdWx0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogIzY2NjtcXG4gICAgZm9udC1zaXplOiAwLjllbTtcXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIC5waG90b24tZmVlZGJhY2sge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgY29sb3I6ICM5OTk7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4ucGhvdG9uLWlucHV0OmZvY3VzIHtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9jc3Mvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7SUFFSSx1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysd0VBQXdFO0lBQ3hFLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osWUFBWTtJQUNaLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYiw2QkFBNkI7SUFDN0IsYUFBYTtJQUNiLHdFQUF3RTtJQUN4RSx5QkFBeUI7QUFDN0I7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsd0VBQXdFO0FBQzVFO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSx5QkFBeUI7SUFDekIsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osV0FBVztJQUNYLDBCQUEwQjtBQUM5QjtBQUNBO0lBQ0ksWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFwYm94Z2wtY3RybC1ncm91cCAubWFwYm94Z2wtZ2VvY29kZXItY3RybFxcbntcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5waG90b24taW5wdXQge1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnVsLnBob3Rvbi1hdXRvY29tcGxldGUge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbiAgICBib3gtc2hhZG93OiAwIDRweCA5cHggIzk5OTk5OTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaSB7XFxuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxZW07XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG59XFxuLnBob3Rvbi1hdXRvY29tcGxldGUgbGkgc3Ryb25nIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIGxpLm9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NmY2ZjZjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaS5waG90b24tbm8tcmVzdWx0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogIzY2NjtcXG4gICAgZm9udC1zaXplOiAwLjllbTtcXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIC5waG90b24tZmVlZGJhY2sge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgY29sb3I6ICM5OTk7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4ucGhvdG9uLWlucHV0OmZvY3VzIHtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsImltcG9ydCBNYXBib3hQaG90b25HZW9jb2RlciBmcm9tICcuL21hcGJveC1waG90b24nO1xuXG5leHBvcnQgZGVmYXVsdCBNYXBib3hQaG90b25HZW9jb2RlcjtcblxuZXhwb3J0IHtcbiAgU2VhcmNoQ29udHJvbE9wdGlvbnMsXG4gIENob2ljZSxcbn0gZnJvbSAnLi9zZWFyY2gtY29udHJvbCc7XG5cbmV4cG9ydCB7IFBvcHVwT3B0aW9ucyB9IGZyb20gJy4vcG9wdXAtbWFuYWdlcic7XG5cbmV4cG9ydCB7XG4gIFBob3Rvbkdlb2NvZGluZyxcbiAgR2VvY29kaW5nT3B0aW9ucyxcbiAgUGhvdG9uUmV2ZXJzZSxcbiAgUmV2ZXJzZU9wdGlvbnMsXG59IGZyb20gJy4vcmVxdWVzdCc7XG4iLCJpbXBvcnQgeyBJQ29udHJvbCwgTWFwIGFzIE1hcGJveE1hcCB9IGZyb20gJ21hcGJveC1nbCc7XG5pbXBvcnQgU2VhcmNoQ29udHJvbCwgeyBTZWFyY2hDb250cm9sT3B0aW9ucywgQ2hvaWNlIH0gZnJvbSAnLi9zZWFyY2gtY29udHJvbCc7XG5pbXBvcnQgeyBQaG90b25HZW9jb2RpbmcsIEdlb2NvZGluZ09wdGlvbnMgfSBmcm9tICcuL3JlcXVlc3QnO1xuaW1wb3J0IFBvcHVwTWFuYWdlciwgeyBQb3B1cE9wdGlvbnMgfSBmcm9tICcuL3BvcHVwLW1hbmFnZXInO1xuXG4vKipcbiAqIE1hcGJveCBHTCBHZW9jb2RlciBDb250cm9sIGZvciBQaG90b24uXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0cyAtIE9iamVjdCBvZiBsYXllci5pZCBhbmQgdGl0bGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwYm94UGhvdG9uR2VvY29kZXIgaW1wbGVtZW50cyBJQ29udHJvbCB7XG4gICAgcHJpdmF0ZSBjb250cm9sQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICAgIHByaXZhdGUgbWFwOiBNYXBib3hNYXA7XG5cbiAgICBwcml2YXRlIHNlYXJjaEJveDogSFRNTElucHV0RWxlbWVudDtcblxuICAgIHByaXZhdGUgc2VhcmNoQ29udHJvbDogU2VhcmNoQ29udHJvbDtcblxuICAgIHByaXZhdGUgcGhvdG9uR2VvY29kaW5nOiBQaG90b25HZW9jb2Rpbmc7XG5cbiAgICBwcml2YXRlIHBvcHVwTWFuYWdlcjogUG9wdXBNYW5hZ2VyO1xuXG4gICAgcHJpdmF0ZSBzZWFyY2hDb250cm9sT3B0aW9uczogU2VhcmNoQ29udHJvbE9wdGlvbnM7XG5cbiAgICBwcml2YXRlIGdlb2NvZGluZ09wdGlvbnM6IEdlb2NvZGluZ09wdGlvbnM7XG5cbiAgICBwcml2YXRlIHBvcHVwT3B0aW9uczogUG9wdXBPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBzZWFyY2hDb250cm9sT3B0aW9uczogU2VhcmNoQ29udHJvbE9wdGlvbnMgPSB7fSxcbiAgICAgIGdlb2NvZGluZ09wdGlvbnM6IEdlb2NvZGluZ09wdGlvbnMgPSB7fSxcbiAgICAgIHBvcHVwT3B0aW9uczogUG9wdXBPcHRpb25zID0ge30sXG4gICAgKSB7XG4gICAgICB0aGlzLnNlYXJjaENvbnRyb2xPcHRpb25zID0gc2VhcmNoQ29udHJvbE9wdGlvbnM7XG4gICAgICB0aGlzLmdlb2NvZGluZ09wdGlvbnMgPSBnZW9jb2RpbmdPcHRpb25zO1xuICAgICAgdGhpcy5wb3B1cE9wdGlvbnMgPSBwb3B1cE9wdGlvbnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldERlZmF1bHRQb3NpdGlvbigpOiBzdHJpbmcge1xuICAgICAgY29uc3QgZGVmYXVsdFBvc2l0aW9uID0gJ3RvcC1sZWZ0JztcbiAgICAgIHJldHVybiBkZWZhdWx0UG9zaXRpb247XG4gICAgfVxuXG4gICAgcHVibGljIG9uQWRkKG1hcDogTWFwYm94TWFwKTogSFRNTEVsZW1lbnQge1xuICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsJyk7XG4gICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1ncm91cCcpO1xuXG4gICAgICB0aGlzLnNlYXJjaEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5zZWFyY2hCb3gpO1xuXG4gICAgICB0aGlzLnBob3Rvbkdlb2NvZGluZyA9IG5ldyBQaG90b25HZW9jb2RpbmcoXG4gICAgICAgIG1hcCxcbiAgICAgICAgdGhpcy5nZW9jb2RpbmdPcHRpb25zLFxuICAgICAgKTtcblxuICAgICAgdGhpcy5wb3B1cE1hbmFnZXIgPSBuZXcgUG9wdXBNYW5hZ2VyKFxuICAgICAgICBtYXAsXG4gICAgICAgIHRoaXMucG9wdXBPcHRpb25zLFxuICAgICAgKTtcblxuICAgICAgaWYgKCF0aGlzLnNlYXJjaENvbnRyb2xPcHRpb25zLm9uU2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zZWFyY2hDb250cm9sT3B0aW9ucy5vblNlbGVjdGVkID0gdGhpcy5vblNlbGVjdGVkLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlYXJjaENvbnRyb2xPcHRpb25zLmRvU2VhcmNoID0gdGhpcy5waG90b25HZW9jb2RpbmcuZ2VvY29kZS5iaW5kKHRoaXMucGhvdG9uR2VvY29kaW5nKTtcbiAgICAgIHRoaXMuc2VhcmNoQ29udHJvbCA9IG5ldyBTZWFyY2hDb250cm9sKHRoaXMuc2VhcmNoQm94LCB0aGlzLnNlYXJjaENvbnRyb2xPcHRpb25zKTtcbiAgICAgIHRoaXMuc2VhcmNoQ29udHJvbC5pbml0aWFsaXplKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xDb250YWluZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdGVkKGNob2ljZTogQ2hvaWNlKSB7XG4gICAgICB0aGlzLnBvcHVwTWFuYWdlci5hZGQoY2hvaWNlLmZlYXR1cmUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblJlbW92ZSgpOiB2b2lkIHtcbiAgICAgIGlmICghdGhpcy5jb250cm9sQ29udGFpbmVyXG4gICAgICAgIHx8ICF0aGlzLmNvbnRyb2xDb250YWluZXIucGFyZW50Tm9kZVxuICAgICAgICB8fCAhdGhpcy5tYXBcbiAgICAgICAgfHwgIXRoaXMuc2VhcmNoQm94KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY29udHJvbENvbnRhaW5lcik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWFwIGFzIE1hcGJveE1hcCwgUG9wdXAsIE1hcmtlciB9IGZyb20gJ21hcGJveC1nbCc7XG5cbmV4cG9ydCB0eXBlIFBvcHVwT3B0aW9ucyA9IHtcbiAgcG9wdXBab29tTGV2ZWw/OiBudW1iZXIsXG4gIGNyZWF0ZUNvbnRlbnQ/OiBGdW5jdGlvbixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBNYW5hZ2VyIHtcbiAgICBwcml2YXRlIG1hcDogTWFwYm94TWFwXG5cbiAgICBwcml2YXRlIG1hcmtlcjogTWFya2VyIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIG9wdGlvbnM6IFBvcHVwT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwYm94TWFwLCBvcHRpb25zOiBQb3B1cE9wdGlvbnMgPSB7fSkge1xuICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIF9jcmVhdGVDb250ZW50KGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSkgOiBzdHJpbmcge1xuICAgICAgY29uc3QgcHJvcHMgPSBmZWF0dXJlLnByb3BlcnRpZXM7XG4gICAgICBpZiAoIXByb3BzKSByZXR1cm4gJyc7XG4gICAgICBsZXQgY29udGVudCA9ICcnO1xuICAgICAgaWYgKHByb3BzLm5hbWUpIHtcbiAgICAgICAgY29udGVudCA9IHByb3BzLm5hbWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkZXRhaWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgWydob3VzZW51bWJlcicsICdzdHJlZXQnLCAnbG9jYWxpdHknLCAnY2l0eScsICdkaXN0cmljdCcsICdzdGF0ZScsICdwb3N0Y29kZScsICdjb3VudHJ5J10uZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2gocHJvcHNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGRldGFpbHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb250ZW50ICs9IGBcbiAgICAgICAgPGJyPlxuICAgICAgICAke2RldGFpbHMuam9pbignLCcpfVxuICAgICAgICBgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29udGVudChmZWF0dXJlOiBHZW9KU09OLkZlYXR1cmUpIHtcbiAgICAgIHJldHVybiAodGhpcy5vcHRpb25zLmNyZWF0ZUNvbnRlbnQpXG4gICAgICAgID8gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbnRlbnQoZmVhdHVyZSlcbiAgICAgICAgOiB0aGlzLl9jcmVhdGVDb250ZW50KGZlYXR1cmUpO1xuICAgIH1cblxuICAgIGFkZChmZWF0dXJlOiBHZW9KU09OLkZlYXR1cmUpIHtcbiAgICAgIGNvbnN0IHBvcHVwID0gbmV3IFBvcHVwKClcbiAgICAgICAgLnNldEhUTUwodGhpcy5jcmVhdGVDb250ZW50KGZlYXR1cmUpKVxuICAgICAgICAuc2V0TWF4V2lkdGgoJzMwMHB4Jyk7XG4gICAgICBpZiAodGhpcy5tYXJrZXIpIHtcbiAgICAgICAgdGhpcy5tYXJrZXIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBsbmdMYXQgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgdGhpcy5tYXJrZXIgPSBuZXcgTWFya2VyKClcbiAgICAgICAgLnNldExuZ0xhdChsbmdMYXQpXG4gICAgICAgIC5zZXRQb3B1cChwb3B1cClcbiAgICAgICAgLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgIHRoaXMubWFya2VyLnRvZ2dsZVBvcHVwKCk7XG4gICAgICBsZXQgY3VycmVudFpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XG4gICAgICBjb25zdCBkZWZhdWx0Wm9vbSA9ICh0aGlzLm9wdGlvbnMucG9wdXBab29tTGV2ZWwpID8gdGhpcy5vcHRpb25zLnBvcHVwWm9vbUxldmVsIDogMTQ7XG4gICAgICBpZiAoY3VycmVudFpvb20gPCBkZWZhdWx0Wm9vbSkge1xuICAgICAgICBjdXJyZW50Wm9vbSA9IGRlZmF1bHRab29tO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXAuZmx5VG8oe1xuICAgICAgICBjZW50ZXI6IGxuZ0xhdCxcbiAgICAgICAgem9vbTogY3VycmVudFpvb20sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgIHRoaXMubWFya2VyPy5yZW1vdmUoKTtcbiAgICAgIHRoaXMubWFya2VyID0gbnVsbDtcbiAgICB9XG59XG4iLCJleHBvcnQgdHlwZSBQaG90b25HZW9jb2RpbmdPcHRpb25zID0ge1xuICBxOiBzdHJpbmcsXG4gIGxpbWl0PzogbnVtYmVyLFxuICBsb24/OiBudW1iZXIsXG4gIGxhdD86IG51bWJlcixcbiAgem9vbT86IG51bWJlcixcbiAgbG9jYXRpb25Gb3JCaWFzPzogbnVtYmVyLFxuICBzY2FsZT86IG51bWJlcixcbiAgbGFuZz86IHN0cmluZyxcbiAgYmJveD86IHN0cmluZyxcbiAgZGVidWc/OiBib29sZWFuLFxuICBvc21fdGFnPzogc3RyaW5nLFxufVxuXG5leHBvcnQgdHlwZSBQaG90b25SZXZlcnNlT3B0aW9ucyA9IHtcbiAgbGFuZz86IHN0cmluZyxcbiAgbGltaXQ/OiBudW1iZXIsXG4gIGxhdDogbnVtYmVyLFxuICBsb246IG51bWJlcixcbiAgb3NtX3RhZz86IHN0cmluZyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGhvdG9uUmVxdWVzdCB7XG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKSB7XG4gICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICBhc3luYyByZXF1ZXN0KHBhcmFtczogUGhvdG9uR2VvY29kaW5nT3B0aW9ucyB8IFBob3RvblJldmVyc2VPcHRpb25zKSB7XG4gICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnVybH0ke09iamVjdC5rZXlzKHBhcmFtcykubWFwKChrKSA9PiBgJHtrfT0ke3BhcmFtc1trXX1gKS5qb2luKCcmJyl9YDtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxHZW9KU09OLkZlYXR1cmVDb2xsZWN0aW9uPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBjb25zdCByYXcgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgY29uc3QgZ2VvanNvbiA9IEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgICAgIHJlc29sdmUoZ2VvanNvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCh4aHIuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWFwIGFzIE1hcGJveE1hcCB9IGZyb20gJ21hcGJveC1nbCc7XG5pbXBvcnQgUGhvdG9uUmVxdWVzdCwgeyBQaG90b25HZW9jb2RpbmdPcHRpb25zIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IHR5cGUgR2VvY29kaW5nT3B0aW9ucyA9IHtcbiAgdXJsPzogc3RyaW5nO1xuICBsaW1pdD86IG51bWJlcjtcbiAgb3NtX3RhZz86IHN0cmluZztcbiAgbGFuZz86IHN0cmluZztcbiAgYmJveD86IG51bWJlcltdO1xuICBpbmNsdWRlUG9zaXRpb24/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaG90b25HZW9jb2Rpbmcge1xuICAgIHByaXZhdGUgbWFwOiBNYXBib3hNYXA7XG5cbiAgICBwcml2YXRlIG9wdGlvbnM6IEdlb2NvZGluZ09wdGlvbnMgPSB7XG4gICAgICB1cmw6ICdodHRwczovL3Bob3Rvbi5rb21vb3QuaW8vYXBpPycsXG4gICAgICBsaW1pdDogNSxcbiAgICAgIG9zbV90YWc6IHVuZGVmaW5lZCxcbiAgICAgIGxhbmc6IHVuZGVmaW5lZCxcbiAgICAgIGJib3g6IFtdLFxuICAgICAgaW5jbHVkZVBvc2l0aW9uOiB0cnVlLFxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwYm94TWFwLCBvcHRpb25zOiBHZW9jb2RpbmdPcHRpb25zKSB7XG4gICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2VvY29kZShxdWVyeTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnVybCkgdGhyb3cgbmV3IEVycm9yKCdObyB1cmwnKTtcbiAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMubWFwLmdldENlbnRlcigpO1xuICAgICAgY29uc3Qgem9vbSA9IHRoaXMubWFwLmdldFpvb20oKSA/IHRoaXMubWFwPy5nZXRab29tKCkgOiAxNDtcbiAgICAgIGNvbnN0IGFqYXggPSBuZXcgUGhvdG9uUmVxdWVzdCh0aGlzLm9wdGlvbnMudXJsKTtcbiAgICAgIGNvbnN0IG9wdGlvbnM6IFBob3Rvbkdlb2NvZGluZ09wdGlvbnMgPSB7XG4gICAgICAgIHE6IHF1ZXJ5LFxuICAgICAgICBsaW1pdDogdGhpcy5vcHRpb25zLmxpbWl0LFxuICAgICAgICB6b29tOiBNYXRoLmZsb29yKHpvb20pLFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5jbHVkZVBvc2l0aW9uKSB7XG4gICAgICAgIG9wdGlvbnMubGF0ID0gY2VudGVyPy5sYXQ7XG4gICAgICAgIG9wdGlvbnMubG9uID0gY2VudGVyPy5sbmc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJib3ggJiYgdGhpcy5vcHRpb25zLmJib3gubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIG9wdGlvbnMuYmJveCA9IHRoaXMub3B0aW9ucy5iYm94LmpvaW4oJywnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3NtX3RhZykge1xuICAgICAgICBvcHRpb25zLm9zbV90YWcgPSB0aGlzLm9wdGlvbnMub3NtX3RhZztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubGFuZykge1xuICAgICAgICBvcHRpb25zLmxhbmcgPSB0aGlzLm9wdGlvbnMubGFuZztcbiAgICAgIH1cbiAgICAgIGFqYXgucmVxdWVzdChvcHRpb25zKS50aGVuKChmZWF0dXJlczogR2VvSlNPTi5GZWF0dXJlQ29sbGVjdGlvbikgPT4geyBjYWxsYmFjayhmZWF0dXJlcyk7IH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBQaG90b25HZW9jb2RpbmcsIHsgR2VvY29kaW5nT3B0aW9ucyB9IGZyb20gJy4vZ2VvY29kaW5nJztcbmltcG9ydCBQaG90b25SZXZlcnNlLCB7IFJldmVyc2VPcHRpb25zIH0gZnJvbSAnLi9yZXZlcnNlJztcblxuZXhwb3J0IHtcbiAgUGhvdG9uR2VvY29kaW5nLFxuICBHZW9jb2RpbmdPcHRpb25zLFxuICBQaG90b25SZXZlcnNlLFxuICBSZXZlcnNlT3B0aW9ucyxcbn07XG4iLCJpbXBvcnQgUGhvdG9uUmVxdWVzdCwgeyBQaG90b25SZXZlcnNlT3B0aW9ucyB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCB0eXBlIFJldmVyc2VPcHRpb25zID0ge1xuICAgIHVybD86IHN0cmluZztcbiAgICBsaW1pdD86IG51bWJlcjtcbiAgICBvc21fdGFnPzogc3RyaW5nO1xuICAgIGxhbmc/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBob3RvblJldmVyc2Uge1xuICAgIHByaXZhdGUgb3B0aW9uczogUmV2ZXJzZU9wdGlvbnMgPSB7XG4gICAgICB1cmw6ICdodHRwczovL3Bob3Rvbi5rb21vb3QuaW8vcmV2ZXJzZT8nLFxuICAgICAgbGltaXQ6IDUsXG4gICAgICBvc21fdGFnOiB1bmRlZmluZWQsXG4gICAgICBsYW5nOiB1bmRlZmluZWQsXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUmV2ZXJzZU9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmV2ZXJzZShsb246IG51bWJlciwgbGF0OiBudW1iZXIpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnVybCkgdGhyb3cgbmV3IEVycm9yKCdObyB1cmwnKTtcbiAgICAgIGNvbnN0IGFqYXggPSBuZXcgUGhvdG9uUmVxdWVzdCh0aGlzLm9wdGlvbnMudXJsKTtcbiAgICAgIGNvbnN0IG9wdGlvbnM6IFBob3RvblJldmVyc2VPcHRpb25zID0ge1xuICAgICAgICBsaW1pdDogdGhpcy5vcHRpb25zLmxpbWl0LFxuICAgICAgICBsYXQsXG4gICAgICAgIGxvbixcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm9zbV90YWcpIHtcbiAgICAgICAgb3B0aW9ucy5vc21fdGFnID0gdGhpcy5vcHRpb25zLm9zbV90YWc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxhbmcpIHtcbiAgICAgICAgb3B0aW9ucy5sYW5nID0gdGhpcy5vcHRpb25zLmxhbmc7XG4gICAgICB9XG4gICAgICBjb25zdCBmZWF0dXJlcyA9IGF3YWl0IGFqYXgucmVxdWVzdChvcHRpb25zKTtcbiAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG59XG4iLCJleHBvcnQgdHlwZSBTZWFyY2hDb250cm9sT3B0aW9ucyA9IHtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICBtaW5DaGFyPzogbnVtYmVyO1xuICAgIHN1Ym1pdERlbGF5PzogbnVtYmVyO1xuICAgIG5vUmVzdWx0TGFiZWw/OiBzdHJpbmcsXG4gICAgZmVlZGJhY2tVcmw/OiBzdHJpbmcsXG4gICAgZmVlZGJhY2tMYWJlbD86IHN0cmluZyxcbiAgICB3aWR0aD86IG51bWJlcixcbiAgICBvblNlbGVjdGVkPzogRnVuY3Rpb24sXG4gICAgZG9TZWFyY2g/OiBGdW5jdGlvbixcbn1cblxuZXhwb3J0IHR5cGUgQ2hvaWNlID0ge1xuICBmZWF0dXJlOiBHZW9KU09OLkZlYXR1cmUsXG4gIGVsOiBIVE1MTElFbGVtZW50LFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hDb250cm9sIHtcbiAgICBwcml2YXRlIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgcHJpdmF0ZSByZXN1bHRzQ29udGFpbmVyOiBIVE1MVUxpc3RFbGVtZW50O1xuXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBTZWFyY2hDb250cm9sT3B0aW9ucyA9IHtcbiAgICAgIHBsYWNlaG9sZGVyOiAnU3RhcnQgdHlwaW5nLi4uJyxcbiAgICAgIG1pbkNoYXI6IDMsXG4gICAgICBzdWJtaXREZWxheTogMzAwLFxuICAgICAgbm9SZXN1bHRMYWJlbDogJ05vIHJlc3VsdCcsXG4gICAgICBmZWVkYmFja1VybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rb21vb3QvcGhvdG9uL2lzc3VlcycsXG4gICAgICBmZWVkYmFja0xhYmVsOiAnRmVlZGJhY2snLFxuICAgICAgb25TZWxlY3RlZDogdW5kZWZpbmVkLFxuICAgICAgZG9TZWFyY2g6IHVuZGVmaW5lZCxcbiAgICB9XG5cbiAgICBwcml2YXRlIHN1Ym1pdERlbGF5OiBudW1iZXIgfCBudWxsO1xuXG4gICAgcHJpdmF0ZSBDQUNIRTogc3RyaW5nID0gJyc7XG5cbiAgICBwcml2YXRlIFJFU1VMVFM6IENob2ljZVtdID0gW107XG5cbiAgICBwcml2YXRlIF9DVVJSRU5UOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGdldCBDVVJSRU5UKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fQ1VSUkVOVDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldCBDVVJSRU5UKGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpbmRleCA9IHRoaXMucmVzdWx0VG9JbmRleChpbmRleCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9DVVJSRU5UID0gaW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBLRVlTID0ge1xuICAgICAgTEVGVDogMzcsXG4gICAgICBVUDogMzgsXG4gICAgICBSSUdIVDogMzksXG4gICAgICBET1dOOiA0MCxcbiAgICAgIFRBQjogOSxcbiAgICAgIFJFVFVSTjogMTMsXG4gICAgICBFU0M6IDI3LFxuICAgICAgQVBQTEU6IDkxLFxuICAgICAgU0hJRlQ6IDE2LFxuICAgICAgQUxUOiAxNyxcbiAgICAgIENUUkw6IDE4LFxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LCBvcHRpb25zOiBTZWFyY2hDb250cm9sT3B0aW9ucykge1xuICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICB0aGlzLmlucHV0LnR5cGUgPSAnc2VhcmNoJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIpIHRoaXMuaW5wdXQucGxhY2Vob2xkZXIgPSB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXI7XG4gICAgICB0aGlzLmlucHV0LmF1dG9jb21wbGV0ZSA9ICdvZmYnO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5pbnB1dC5hdXRvY29ycmVjdCA9ICdvZmYnO1xuICAgICAgdGhpcy5pbnB1dC5jbGFzc0xpc3QuYWRkKCdwaG90b24taW5wdXQnKTtcbiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMub25JbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25CbHVyLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMub25Gb2N1cy5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuY3JlYXRlUmVzdWx0c0NvbnRhaW5lcigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVzdWx0c0NvbnRhaW5lcigpIHtcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncGhvdG9uLWF1dG9jb21wbGV0ZScpO1xuICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICAgIGJvZHk/LmFwcGVuZENoaWxkKHRoaXMucmVzdWx0c0NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmVzaXplQ29udGFpbmVyKCkge1xuICAgICAgY29uc3QgbCA9IHRoaXMuZ2V0TGVmdCh0aGlzLmlucHV0KTtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLmdldFRvcCh0aGlzLmlucHV0KSArIHRoaXMuaW5wdXQub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7bH1weGA7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUudG9wID0gYCR7dH1weGA7XG4gICAgICBjb25zdCB3aWR0aCA9IHRoaXMub3B0aW9ucy53aWR0aCA/IHRoaXMub3B0aW9ucy53aWR0aCA6IHRoaXMuaW5wdXQub2Zmc2V0V2lkdGggLSAyO1xuICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgdGhpcy5LRVlTLlRBQjpcbiAgICAgICAgICBpZiAodGhpcy5DVVJSRU5UICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRoaXMuS0VZUy5SRVRVUk46XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRoaXMuS0VZUy5FU0M6XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0aGlzLktFWVMuRE9XTjpcbiAgICAgICAgICBpZiAodGhpcy5SRVNVTFRTLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLkNVUlJFTlQgIT09IG51bGwgJiYgdGhpcy5DVVJSRU5UIDwgdGhpcy5SRVNVTFRTLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgdGhpcy5DVVJSRU5UICs9IDE7XG4gICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ1VSUkVOVCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLkNVUlJFTlQgPSAwO1xuICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0aGlzLktFWVMuVVA6XG4gICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCAmJiB0aGlzLlJFU1VMVFMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5DVVJSRU5UIC09IDE7XG4gICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ1VSUkVOVCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uSW5wdXQoKTogdm9pZCB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuc3VibWl0RGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5zdWJtaXREZWxheSk7XG4gICAgICAgIHRoaXMuc3VibWl0RGVsYXkgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5zdWJtaXREZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuc2VhcmNoLmJpbmQodGhpcyksIHRoaXMub3B0aW9ucy5zdWJtaXREZWxheSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkJsdXIoKTogdm9pZCB7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZWxmLmhpZGUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZvY3VzKCkge1xuICAgICAgdGhpcy5pbnB1dC5zZWxlY3QoKTtcbiAgICAgIHRoaXMuc2VhcmNoKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhcigpIHtcbiAgICAgIHRoaXMuUkVTVUxUUyA9IFtdO1xuICAgICAgdGhpcy5DVVJSRU5UID0gMDtcbiAgICAgIHRoaXMuQ0FDSEUgPSAnJztcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGhpZGUoKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENob2ljZSgpIHtcbiAgICAgIGNvbnN0IGNob2ljZTogQ2hvaWNlID0gdGhpcy5SRVNVTFRTW3RoaXMuQ1VSUkVOVF07XG4gICAgICBpZiAoY2hvaWNlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLm9uU2VsZWN0ZWQoY2hvaWNlKTtcbiAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2VhcmNoKCkge1xuICAgICAgY29uc3QgdmFsID0gdGhpcy5pbnB1dC52YWx1ZTtcbiAgICAgIGNvbnN0IG1pbkNoYXIgPSAodGhpcy5vcHRpb25zLm1pbkNoYXIgJiYgdmFsLmxlbmd0aCA+PSB0aGlzLm9wdGlvbnMubWluQ2hhcik7XG4gICAgICBpZiAoIXZhbCB8fCAhbWluQ2hhcikge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChgJHt2YWx9JydgID09PSBgJHt0aGlzLkNBQ0hFfScnYCkgcmV0dXJuO1xuICAgICAgdGhpcy5DQUNIRSA9IHZhbDtcbiAgICAgIHRoaXMuX2RvU2VhcmNoKHZhbCwgdGhpcy5oYW5kbGVSZXN1bHQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZG9TZWFyY2gocXVlcnk6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRvU2VhcmNoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kb1NlYXJjaChxdWVyeSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX29uU2VsZWN0ZWQoY2hvaXNlOiBDaG9pY2UpIHt9XG5cbiAgICBwcml2YXRlIG9uU2VsZWN0ZWQoY2hvaWNlOiBDaG9pY2UpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub25TZWxlY3RlZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMub25TZWxlY3RlZChjaG9pY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fb25TZWxlY3RlZChjaG9pY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0UmVzdWx0KGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSwgZWw6IEhUTUxMSUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICBjb25zdCBkZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc21hbGwnKTtcbiAgICAgIGVsLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xuICAgICAgY29uc3QgZGV0YWlsczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmZvcm1hdFR5cGUoZmVhdHVyZSk7XG4gICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzPy5uYW1lKSB7XG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IGZlYXR1cmUucHJvcGVydGllcy5uYW1lO1xuICAgICAgfSBlbHNlIGlmIChmZWF0dXJlLnByb3BlcnRpZXM/LmhvdXNlbnVtYmVyKSB7XG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IGZlYXR1cmUucHJvcGVydGllcy5ob3VzZW51bWJlcjtcbiAgICAgICAgaWYgKGZlYXR1cmUucHJvcGVydGllcy5zdHJlZXQpIHtcbiAgICAgICAgICB0aXRsZS5pbm5lckhUTUwgKz0gYCAke2ZlYXR1cmUucHJvcGVydGllcy5zdHJlZXR9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUpIGRldGFpbHMucHVzaCh0eXBlKTtcbiAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXM/LmNpdHkgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLmNpdHkgIT09IGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSB7XG4gICAgICAgIGRldGFpbHMucHVzaChmZWF0dXJlLnByb3BlcnRpZXMuY2l0eSk7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzPy5jb3VudHJ5KSBkZXRhaWxzLnB1c2goZmVhdHVyZS5wcm9wZXJ0aWVzLmNvdW50cnkpO1xuICAgICAgZGV0YWlsc0NvbnRhaW5lci5pbm5lckhUTUwgPSBkZXRhaWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRUeXBlKGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSkge1xuICAgICAgcmV0dXJuIGZlYXR1cmUucHJvcGVydGllcz8ub3NtX3ZhbHVlID09PSAneWVzJ1xuICAgICAgICA/IGZlYXR1cmUucHJvcGVydGllcy5vc21fa2V5XG4gICAgICAgIDogZmVhdHVyZS5wcm9wZXJ0aWVzPy5vc21fdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVSZXN1bHQoZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlKSB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgdGhpcy5mb3JtYXRSZXN1bHQoZmVhdHVyZSwgZWwpO1xuICAgICAgY29uc3QgcmVzdWx0OiBDaG9pY2UgPSB7XG4gICAgICAgIGZlYXR1cmUsXG4gICAgICAgIGVsLFxuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMub25Nb3VzZW92ZXIuYmluZCh0aGlzLCByZXN1bHQpKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZWRvd24uYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZW92ZXIocmVzdWx0KSB7XG4gICAgICB0aGlzLkNVUlJFTlQgPSByZXN1bHQ7XG4gICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZWRvd24oKSB7XG4gICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdWx0VG9JbmRleChyZXN1bHQpIHtcbiAgICAgIGxldCBvdXQgPSAwO1xuICAgICAgdGhpcy5SRVNVTFRTLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpdGVtID09PSByZXN1bHQpIHtcbiAgICAgICAgICBvdXQgPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlUmVzdWx0KGdlb2pzb246IEdlb0pTT04uRmVhdHVyZUNvbGxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcbiAgICAgIGdlb2pzb24uZmVhdHVyZXMuZm9yRWFjaCgoZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlKSA9PiB7XG4gICAgICAgIHNlbGYuUkVTVUxUUy5wdXNoKHNlbGYuY3JlYXRlUmVzdWx0KGZlYXR1cmUpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGdlb2pzb24uZmVhdHVyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IG5vcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbm9yZXN1bHQuY2xhc3NMaXN0LmFkZCgncGhvdG9uLW5vLXJlc3VsdCcpO1xuICAgICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuYXBwZW5kQ2hpbGQobm9yZXN1bHQpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5vUmVzdWx0TGFiZWwpIG5vcmVzdWx0LmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5ub1Jlc3VsdExhYmVsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mZWVkYmFja1VybCkge1xuICAgICAgICBjb25zdCBmZWVkYmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZmVlZGJhY2suY2xhc3NMaXN0LmFkZCgncGhvdG9uLWZlZWRiYWNrJyk7XG4gICAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmZWVkYmFjayk7XG4gICAgICAgIGZlZWRiYWNrLmhyZWYgPSBgJHt0aGlzLm9wdGlvbnMuZmVlZGJhY2tVcmx9YDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mZWVkYmFja0xhYmVsKSBmZWVkYmFjay5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuZmVlZGJhY2tMYWJlbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuQ1VSUkVOVCA9IDA7XG4gICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGlnaGxpZ2h0KCkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLlJFU1VMVFMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBzZWxmLkNVUlJFTlQpIHtcbiAgICAgICAgICBpdGVtLmVsLmNsYXNzTGlzdC5hZGQoJ29uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbS5lbC5jbGFzc0xpc3QucmVtb3ZlKCdvbicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExlZnQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICBsZXQgdG1wID0gZWwub2Zmc2V0TGVmdDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIHRtcCArPSBlbC5vZmZzZXRMZWZ0O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRtcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRvcChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCB0bXAgPSBlbC5vZmZzZXRUb3A7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBlbCA9IGVsLm9mZnNldFBhcmVudDtcbiAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICB0bXAgKz0gZWwub2Zmc2V0VG9wO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRtcDtcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1hcGJveGdsOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgbWFwYm94Z2wgZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCBNYXBib3hQaG90b25HZW9jb2RlciwgeyBQaG90b25SZXZlcnNlIH0gZnJvbSAnLi4vbGliL2luZGV4JztcbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4oYXN5bmMoKT0+e1xuICAgIC8vIG1hcGJveGdsLmFjY2Vzc1Rva2VuPSd5b3VyIG1hcGJveCBhY2Nlc3MgdG9rZW4nXG4gICAgY29uc3QgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgIGNvbnRhaW5lcjogJ21hcCcsXG4gICAgICAgIHN0eWxlOidodHRwczovL25hcndhc3Njby5naXRodWIuaW8vbmFydS9zdHlsZS5qc29uJyxcbiAgICAgICAgY2VudGVyOiBbMzUuODcwNjMsIC0xLjA4NTUxXSxcbiAgICAgICAgem9vbTogMTIsXG4gICAgICAgIGhhc2g6dHJ1ZSxcbiAgICB9KTtcbiAgICBtYXAuYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuTmF2aWdhdGlvbkNvbnRyb2woKSwgJ3RvcC1yaWdodCcpO1xuICAgIG1hcC5hZGRDb250cm9sKG5ldyBNYXBib3hQaG90b25HZW9jb2RlcigpLCAndG9wLWxlZnQnKTtcblxuICAgIGNvbnN0IHJlY3ZlcnNlID0gbmV3IFBob3RvblJldmVyc2UoKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWN2ZXJzZS5yZXZlcnNlKDM1Ljg2NjQwMzksIC0xLjA4NjE1MTQpO1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG59KSgpIl0sInNvdXJjZVJvb3QiOiIifQ==