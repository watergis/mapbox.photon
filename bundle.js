(()=>{"use strict";var t,e,n,o,i,s,r={170:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),i=n.n(o),s=n(645),r=n.n(s)()(i());r.push([t.id,'.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}',"",{version:3,sources:["webpack://./css/styles.css"],names:[],mappings:"AAAA;;IAEI,uBAAuB;IACvB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,wEAAwE;IACxE,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,kBAAkB;IAClB,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,6BAA6B;IAC7B,aAAa;IACb,wEAAwE;IACxE,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;IAChB,wEAAwE;AAC5E;AACA;IACI,cAAc;AAClB;AACA;IACI,yBAAyB;IACzB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,0BAA0B;AAC9B;AACA;IACI,YAAY;AAChB",sourcesContent:['.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}'],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(o)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(i[r]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);o&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,i=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var o,i,s=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(o=n.next()).done)&&(s.push(o.value),!e||s.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw i}}return s}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=i[1],r=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),h=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[s].concat(h).concat([c]).join("\n")}return[s].join("\n")}},379:(t,e,n)=>{var o,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function r(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],i=0;i<t.length;i++){var a=t[i],l=e.base?a[0]+e.base:a[0],c=n[l]||0,h="".concat(l," ").concat(c);n[l]=c+1;var p=r(h),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(s[p].references++,s[p].updater(u)):s.push({identifier:h,updater:A(u,e),references:1}),o.push(h)}return o}function l(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var s=n.nc;s&&(o.nonce=s)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var r=i(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var s=document.createTextNode(i),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function u(t,e,n){var o=n.css,i=n.media,s=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,f=0;function A(t,e){var n,o,i;if(e.singleton){var s=f++;n=d||(d=l(e)),o=p.bind(null,n,s,!1),i=p.bind(null,n,s,!0)}else n=l(e),o=u.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=r(n[o]);s[i].references--}for(var l=a(t,e),c=0;c<n.length;c++){var h=r(n[c]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}n=l}}}},620:(t,e,n)=>{const o=n(173);e.Z=o.default},173:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(119);e.default=class{constructor(t){this.options=t||{}}getDefaultPosition(){return"top-left"}onAdd(t){return this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.searchBox=document.createElement("input"),this.controlContainer.appendChild(this.searchBox),this.photonSearch=new o.default(this.searchBox,this.map,this.options),this.photonSearch.initialize(),this.controlContainer}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.searchBox&&this.controlContainer.parentNode.removeChild(this.controlContainer)}}},437:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,s){function r(t){try{l(o.next(t))}catch(t){s(t)}}function a(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.url=t}request(t){return n(this,void 0,void 0,(function*(){const e=`${this.url}${Object.keys(t).map((e=>`${e}=${t[e]}`)).join("&")}`;return new Promise(((t,n)=>{const o=new XMLHttpRequest;o.open("GET",e),o.onload=()=>{if(200===o.status){const e=o.responseText,n=JSON.parse(e);t(n)}else n(o.statusText)},o.send()}))}))}}},119:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(437),i=n(64);e.default=class{constructor(t,e,n){this.options={url:"https://photon.komoot.io/api?",placeholder:"Start typing...",minChar:3,limit:5,submitDelay:300,includePosition:!0,bbox:null,noResultLabel:"No result",feedbackUrl:"https://github.com/komoot/photon/issues",feedbackLabel:"Feedback",popupZoomLevel:14,createContent:void 0},this.CACHE="",this.RESULTS=[],this.KEYS={LEFT:37,UP:38,RIGHT:39,DOWN:40,TAB:9,RETURN:13,ESC:27,APPLE:91,SHIFT:16,ALT:17,CTRL:18},this.input=t,this.map=e,n&&(this.options=Object.assign(this.options,n)),this.popupManager=new i.default(e,this.options.popupZoomLevel,this.options.createContent)}get CURRENT(){return this._CURRENT}set CURRENT(t){"object"==typeof t&&(t=this.resultToIndex(t)),this._CURRENT=t}initialize(){this.input.type="search",this.options.placeholder&&(this.input.placeholder=this.options.placeholder),this.input.autocomplete="off",this.input.autocorrect="off",this.input.classList.add("photon-input"),this.input.addEventListener("keydown",this.onKeyDown.bind(this)),this.input.addEventListener("input",this.onInput.bind(this)),this.input.addEventListener("blur",this.onBlur.bind(this)),this.input.addEventListener("focus",this.onFocus.bind(this)),this.createResultsContainer()}createResultsContainer(){this.resultsContainer=document.createElement("ul"),this.resultsContainer.classList.add("photon-autocomplete");const t=document.querySelector("body");null==t||t.appendChild(this.resultsContainer)}resizeContainer(){const t=this.getLeft(this.input),e=this.getTop(this.input)+this.input.offsetHeight/2;this.resultsContainer.style.left=`${t}px`,this.resultsContainer.style.top=`${e}px`;const n=this.options.width?this.options.width:this.input.offsetWidth-2;this.resultsContainer.style.width=`${n}px`}onKeyDown(t){switch(t.keyCode){case this.KEYS.TAB:null!==this.CURRENT&&this.setChoice(),t.stopPropagation();break;case this.KEYS.RETURN:t.stopPropagation(),this.setChoice();break;case this.KEYS.ESC:t.stopPropagation(),this.hide(),this.input.blur();break;case this.KEYS.DOWN:this.RESULTS.length>0&&(null!==this.CURRENT&&this.CURRENT<this.RESULTS.length-1?(this.CURRENT+=1,this.highlight()):null===this.CURRENT&&(this.CURRENT=0,this.highlight()));break;case this.KEYS.UP:this.CURRENT&&t.stopPropagation(),this.CURRENT&&this.RESULTS.length>0&&(this.CURRENT>0?(this.CURRENT-=1,this.highlight()):0===this.CURRENT&&this.highlight())}}onInput(){"number"==typeof this.submitDelay&&(window.clearTimeout(this.submitDelay),this.submitDelay=null),this.submitDelay=window.setTimeout(this.search.bind(this),this.options.submitDelay)}onBlur(){const t=this;setTimeout((()=>{t.hide()}),100)}onFocus(){this.input.select(),this.search()}clear(){this.RESULTS=[],this.CURRENT=0,this.CACHE="",this.resultsContainer.innerHTML=""}hide(){this.clear(),this.resultsContainer.style.display="none"}setChoice(){const t=this.RESULTS[this.CURRENT];t&&(this.hide(),this.onSelected(t),this.input.value="")}search(){var t;const e=this.map.getCenter(),n=this.map.getZoom()?null===(t=this.map)||void 0===t?void 0:t.getZoom():14,i=this.input.value,s=this.options.minChar&&i.length>=this.options.minChar;if(i&&s){if(this.options.url&&`${i}''`!=`${this.CACHE}''`){this.CACHE=i;const t=new o.default(this.options.url),s={q:i,limit:this.options.limit,zoom:Math.floor(n)};this.options.includePosition&&(s.lat=null==e?void 0:e.lat,s.lon=null==e?void 0:e.lng),t.request(s).then(this.handleResult.bind(this))}}else this.clear()}onSelected(t){this.popupManager.add(t.feature)}formatResult(t,e){var n,o,i,s;const r=document.createElement("strong");e.appendChild(r);const a=document.createElement("small");e.appendChild(a);const l=[],c=this.formatType(t);(null===(n=t.properties)||void 0===n?void 0:n.name)?r.innerHTML=t.properties.name:(null===(o=t.properties)||void 0===o?void 0:o.housenumber)&&(r.innerHTML=t.properties.housenumber,t.properties.street&&(r.innerHTML+=` ${t.properties.street}`)),c&&l.push(c),(null===(i=t.properties)||void 0===i?void 0:i.city)&&t.properties.city!==t.properties.name&&l.push(t.properties.city),(null===(s=t.properties)||void 0===s?void 0:s.country)&&l.push(t.properties.country),a.innerHTML=l.join(", ")}formatType(t){var e,n;return"yes"===(null===(e=t.properties)||void 0===e?void 0:e.osm_value)?t.properties.osm_key:null===(n=t.properties)||void 0===n?void 0:n.osm_value}createResult(t){const e=document.createElement("li");this.resultsContainer.appendChild(e),this.formatResult(t,e);const n={feature:t,el:e};return e.addEventListener("mouseover",this.onMouseover.bind(this,n)),e.addEventListener("mousedown",this.onMousedown.bind(this)),n}onMouseover(t){this.CURRENT=t,this.highlight()}onMousedown(){this.setChoice()}resultToIndex(t){let e=0;return this.RESULTS.forEach(((n,o)=>{n===t&&(e=o)})),e}handleResult(t){const e=this;if(this.clear(),this.resultsContainer.style.display="block",this.resizeContainer(),t.features.forEach((t=>{e.RESULTS.push(e.createResult(t))})),0===t.features.length){const t=document.createElement("li");t.classList.add("photon-no-result"),this.resultsContainer.appendChild(t),this.options.noResultLabel&&(t.innerHTML=this.options.noResultLabel)}if(this.options.feedbackUrl){const t=document.createElement("a");t.classList.add("photon-feedback"),this.resultsContainer.appendChild(t),t.href=`${this.options.feedbackUrl}`,this.options.feedbackLabel&&(t.innerHTML=this.options.feedbackLabel)}this.CURRENT=0,this.highlight()}highlight(){const t=this;this.RESULTS.forEach(((e,n)=>{n===t.CURRENT?e.el.classList.add("on"):e.el.classList.remove("on")}))}getLeft(t){let e=t.offsetLeft;for(t=t.offsetParent;t;)e+=t.offsetLeft,t=t.offsetParent;return e}getTop(t){let e=t.offsetTop;for(t=t.offsetParent;t;)e+=t.offsetTop,t=t.offsetParent;return e}}},64:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(507);e.default=class{constructor(t,e=14,n){this.marker=null,this.map=t,this.zoom=e,this.createContentFunction=n}_createContent(t){const e=t.properties;if(!e)return"";let n="";e.name&&(n=e.name);const o=[];return["housenumber","street","locality","city","district","state","postcode","country"].forEach((t=>{e[t]&&o.push(e[t])})),o.length>0&&(n+=`\n        <br>\n        ${o.join(",")}\n        `),n}createContent(t){return this.createContentFunction?this.createContentFunction(t):this._createContent(t)}add(t){const e=(new o.Popup).setHTML(this.createContent(t)).setMaxWidth("300px");this.marker&&this.marker.remove();const n=t.geometry.coordinates;this.marker=(new o.Marker).setLngLat(n).setPopup(e).addTo(this.map),this.marker.togglePopup();let i=this.map.getZoom();i<this.zoom&&(i=this.zoom),this.map.flyTo({center:n,zoom:i})}clear(){var t;null===(t=this.marker)||void 0===t||t.remove(),this.marker=null}}},507:t=>{t.exports=mapboxgl}},a={};function l(t){var e=a[t];if(void 0!==e)return e.exports;var n=a[t]={id:t,exports:{}};return r[t].call(n.exports,n,n.exports,l),n.exports}l.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return l.d(e,{a:e}),e},l.d=(t,e)=>{for(var n in e)l.o(e,n)&&!l.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},l.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=l(507),e=l.n(t),n=l(620),o=l(379),i=l.n(o),s=l(170),i()(s.Z,{insert:"head",singleton:!1}),s.Z.locals,(()=>{const t=new(e().Map)({container:"map",style:"https://narwassco.github.io/mapbox-stylefiles/unvt/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new n.Z,"top-left")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2Nzcy9zdHlsZXMuY3NzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbGliL2luZGV4LnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uLy4vbGliL21hcGJveC1waG90b24udHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvcGhvdG9uLXJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9saWIvcGhvdG9uLXNlYXJjaC50cyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2xpYi9wb3B1cC1tYW5hZ2VyLnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gucGhvdG9uL2V4dGVybmFsIFwibWFwYm94Z2xcIiIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LnBob3Rvbi8uL2Nzcy9zdHlsZXMuY3NzP2U4MWEiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC5waG90b24vLi9leGFtcGxlL2luZGV4LmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiZ2V0RGVmYXVsdFBvc2l0aW9uIiwib25BZGQiLCJjb250cm9sQ29udGFpbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwic2VhcmNoQm94IiwicGhvdG9uU2VhcmNoIiwiaW5pdGlhbGl6ZSIsIm9uUmVtb3ZlIiwidXJsIiwicmVxdWVzdCIsInBhcmFtcyIsImsiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ubG9hZCIsInN0YXR1cyIsInJhdyIsInJlc3BvbnNlVGV4dCIsImdlb2pzb24iLCJwYXJzZSIsInN0YXR1c1RleHQiLCJzZW5kIiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsIm1pbkNoYXIiLCJsaW1pdCIsInN1Ym1pdERlbGF5IiwiaW5jbHVkZVBvc2l0aW9uIiwiYmJveCIsIm5vUmVzdWx0TGFiZWwiLCJmZWVkYmFja1VybCIsImZlZWRiYWNrTGFiZWwiLCJwb3B1cFpvb21MZXZlbCIsImNyZWF0ZUNvbnRlbnQiLCJ1bmRlZmluZWQiLCJDQUNIRSIsIlJFU1VMVFMiLCJLRVlTIiwiTEVGVCIsIlVQIiwiUklHSFQiLCJET1dOIiwiVEFCIiwiUkVUVVJOIiwiRVNDIiwiQVBQTEUiLCJTSElGVCIsIkFMVCIsIkNUUkwiLCJhc3NpZ24iLCJwb3B1cE1hbmFnZXIiLCJfQ1VSUkVOVCIsInJlc3VsdFRvSW5kZXgiLCJ0eXBlIiwiYXV0b2NvbXBsZXRlIiwiYXV0b2NvcnJlY3QiLCJhZGRFdmVudExpc3RlbmVyIiwib25LZXlEb3duIiwib25JbnB1dCIsIm9uQmx1ciIsIm9uRm9jdXMiLCJjcmVhdGVSZXN1bHRzQ29udGFpbmVyIiwicmVzdWx0c0NvbnRhaW5lciIsImJvZHkiLCJyZXNpemVDb250YWluZXIiLCJsIiwiZ2V0TGVmdCIsInQiLCJnZXRUb3AiLCJvZmZzZXRIZWlnaHQiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImtleUNvZGUiLCJDVVJSRU5UIiwic2V0Q2hvaWNlIiwic3RvcFByb3BhZ2F0aW9uIiwiaGlkZSIsImJsdXIiLCJoaWdobGlnaHQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2VhcmNoIiwic2VsZiIsInNlbGVjdCIsImNsZWFyIiwiaW5uZXJIVE1MIiwiZGlzcGxheSIsImNob2ljZSIsIm9uU2VsZWN0ZWQiLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJ6b29tIiwiZ2V0Wm9vbSIsInZhbCIsImFqYXgiLCJxIiwiTWF0aCIsImZsb29yIiwibGF0IiwibG9uIiwibG5nIiwidGhlbiIsImhhbmRsZVJlc3VsdCIsImZlYXR1cmUiLCJmb3JtYXRSZXN1bHQiLCJlbCIsInRpdGxlIiwiZGV0YWlsc0NvbnRhaW5lciIsImRldGFpbHMiLCJmb3JtYXRUeXBlIiwicHJvcGVydGllcyIsImhvdXNlbnVtYmVyIiwic3RyZWV0IiwiY2l0eSIsImNvdW50cnkiLCJvc21fdmFsdWUiLCJvc21fa2V5IiwiY3JlYXRlUmVzdWx0Iiwib25Nb3VzZW92ZXIiLCJvbk1vdXNlZG93biIsIm91dCIsImZlYXR1cmVzIiwibm9yZXN1bHQiLCJmZWVkYmFjayIsImhyZWYiLCJ0bXAiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0VG9wIiwibWFya2VyIiwiY3JlYXRlQ29udGVudEZ1bmN0aW9uIiwiX2NyZWF0ZUNvbnRlbnQiLCJwcm9wcyIsInBvcHVwIiwiUG9wdXAiLCJzZXRIVE1MIiwic2V0TWF4V2lkdGgiLCJsbmdMYXQiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiTWFya2VyIiwic2V0TG5nTGF0Iiwic2V0UG9wdXAiLCJhZGRUbyIsInRvZ2dsZVBvcHVwIiwiY3VycmVudFpvb20iLCJmbHlUbyIsIm1hcGJveGdsIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJjb250YWluZXIiLCJoYXNoIiwiYWRkQ29udHJvbCJdLCJtYXBwaW5ncyI6Im1HQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDIrQ0FBdy9DLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDhCQUE4QixNQUFRLEdBQUcsU0FBVyxxbUJBQXFtQixlQUFpQixDQUFDLDQrQ0FBdy9DLFdBQWEsTUFFNXVILFcsUUNDQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxLQUNORSxLQUFLLEtBS1ZQLEVBQUtRLEVBQUksU0FBVUMsRUFBU0MsRUFBWUMsR0FDZixpQkFBWkYsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFJRyxFQUF5QixHQUU3QixHQUFJRCxFQUNGLElBQUssSUFBSUgsRUFBSSxFQUFHQSxFQUFJTixLQUFLVyxPQUFRTCxJQUFLLENBRXBDLElBQUlYLEVBQUtLLEtBQUtNLEdBQUcsR0FFUCxNQUFOWCxJQUNGZSxFQUF1QmYsSUFBTSxHQUtuQyxJQUFLLElBQUlpQixFQUFLLEVBQUdBLEVBQUtMLEVBQVFJLE9BQVFDLElBQU0sQ0FDMUMsSUFBSVYsRUFBTyxHQUFHRSxPQUFPRyxFQUFRSyxJQUV6QkgsR0FBVUMsRUFBdUJSLEVBQUssTUFLdENNLElBQ0dOLEVBQUssR0FHUkEsRUFBSyxHQUFLLEdBQUdFLE9BQU9JLEVBQVksU0FBU0osT0FBT0YsRUFBSyxJQUZyREEsRUFBSyxHQUFLTSxHQU1kVixFQUFLTCxLQUFLUyxNQUlQSixJLE9DeERULFNBQVNlLEVBQWtCQyxF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QVl6TSxLQUFTaU0sRUFBb0IvUCxFQUFFdEMsRUFBU29HLElBQzVFM0QsT0FBT3FRLGVBQWU5UyxFQUFTb0csRUFBSyxDQUFFMk0sWUFBWSxFQUFNQyxJQUFLSCxFQUFXek0sTUNKM0VpTSxFQUFvQi9QLEVBQUksQ0FBQ2dELEVBQUsyTixJQUFVeFEsT0FBT0MsVUFBVXdRLGVBQWVsUixLQUFLc0QsRUFBSzJOLEcsc0RDUXJFLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTUwsV0NSZixNQUVJLE1BQU01UyxFQUFNLElBQUksU0FBYSxDQUN6QjhTLFVBQVcsTUFFWHJOLE1BQU0sZ0VBQ04ySSxPQUFRLENBQUMsVUFBVyxTQUNwQkUsS0FBTSxHQUNOeUUsTUFBSyxJQUVUL1MsRUFBSWdULFdBQVcsSUFBSSx1QkFBOEIsYUFDakRoVCxFQUFJZ1QsV0FBVyxJQUFJLElBQXdCLGFBWC9DLEkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWFwYm94Z2wtY3RybC1ncm91cCAubWFwYm94Z2wtZ2VvY29kZXItY3RybFxcbntcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5waG90b24taW5wdXQge1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnVsLnBob3Rvbi1hdXRvY29tcGxldGUge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbiAgICBib3gtc2hhZG93OiAwIDRweCA5cHggIzk5OTk5OTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaSB7XFxuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxZW07XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG59XFxuLnBob3Rvbi1hdXRvY29tcGxldGUgbGkgc3Ryb25nIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIGxpLm9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NmY2ZjZjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaS5waG90b24tbm8tcmVzdWx0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogIzY2NjtcXG4gICAgZm9udC1zaXplOiAwLjllbTtcXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIC5waG90b24tZmVlZGJhY2sge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgY29sb3I6ICM5OTk7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4ucGhvdG9uLWlucHV0OmZvY3VzIHtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9jc3Mvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7SUFFSSx1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysd0VBQXdFO0lBQ3hFLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osWUFBWTtJQUNaLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYiw2QkFBNkI7SUFDN0IsYUFBYTtJQUNiLHdFQUF3RTtJQUN4RSx5QkFBeUI7QUFDN0I7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsd0VBQXdFO0FBQzVFO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSx5QkFBeUI7SUFDekIsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osV0FBVztJQUNYLDBCQUEwQjtBQUM5QjtBQUNBO0lBQ0ksWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFwYm94Z2wtY3RybC1ncm91cCAubWFwYm94Z2wtZ2VvY29kZXItY3RybFxcbntcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5waG90b24taW5wdXQge1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnVsLnBob3Rvbi1hdXRvY29tcGxldGUge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbiAgICBib3gtc2hhZG93OiAwIDRweCA5cHggIzk5OTk5OTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaSB7XFxuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxZW07XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG59XFxuLnBob3Rvbi1hdXRvY29tcGxldGUgbGkgc3Ryb25nIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIGxpLm9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NmY2ZjZjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucGhvdG9uLWF1dG9jb21wbGV0ZSBsaS5waG90b24tbm8tcmVzdWx0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogIzY2NjtcXG4gICAgZm9udC1zaXplOiAwLjllbTtcXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcbi5waG90b24tYXV0b2NvbXBsZXRlIC5waG90b24tZmVlZGJhY2sge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgY29sb3I6ICM5OTk7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4ucGhvdG9uLWlucHV0OmZvY3VzIHtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsImltcG9ydCBNYXBib3hQaG90b25HZW9jb2RlciBmcm9tICcuL21hcGJveC1waG90b24nO1xuXG5leHBvcnQgZGVmYXVsdCBNYXBib3hQaG90b25HZW9jb2RlcjtcbmV4cG9ydCB7IFBob3Rvbk9wdGlvbnMgfSBmcm9tICcuL3Bob3Rvbi1zZWFyY2gnO1xuIiwiaW1wb3J0IHsgSUNvbnRyb2wsIE1hcCBhcyBNYXBib3hNYXAgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IFBob3RvblNlYXJjaCwgeyBQaG90b25PcHRpb25zIH0gZnJvbSAnLi9waG90b24tc2VhcmNoJztcblxuLyoqXG4gKiBNYXBib3ggR0wgR2VvY29kZXIgQ29udHJvbCBmb3IgUGhvdG9uLlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldHMgLSBPYmplY3Qgb2YgbGF5ZXIuaWQgYW5kIHRpdGxlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcGJveFBob3Rvbkdlb2NvZGVyIGltcGxlbWVudHMgSUNvbnRyb2wge1xuICAgIHByaXZhdGUgY29udHJvbENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIG1hcDogTWFwYm94TWFwO1xuXG4gICAgcHJpdmF0ZSBzZWFyY2hCb3g6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIHBob3RvblNlYXJjaDogUGhvdG9uU2VhcmNoO1xuXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBQaG90b25PcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUGhvdG9uT3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGVmYXVsdFBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSAndG9wLWxlZnQnO1xuICAgICAgcmV0dXJuIGRlZmF1bHRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25BZGQobWFwOiBNYXBib3hNYXApOiBIVE1MRWxlbWVudCB7XG4gICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5jb250cm9sQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwnKTtcbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdyb3VwJyk7XG5cbiAgICAgIHRoaXMuc2VhcmNoQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnNlYXJjaEJveCk7XG5cbiAgICAgIHRoaXMucGhvdG9uU2VhcmNoID0gbmV3IFBob3RvblNlYXJjaCh0aGlzLnNlYXJjaEJveCwgdGhpcy5tYXAsIHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLnBob3RvblNlYXJjaC5pbml0aWFsaXplKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xDb250YWluZXI7XG4gICAgfVxuXG4gICAgcHVibGljIG9uUmVtb3ZlKCk6IHZvaWQge1xuICAgICAgaWYgKCF0aGlzLmNvbnRyb2xDb250YWluZXJcbiAgICAgICAgfHwgIXRoaXMuY29udHJvbENvbnRhaW5lci5wYXJlbnROb2RlXG4gICAgICAgIHx8ICF0aGlzLm1hcFxuICAgICAgICB8fCAhdGhpcy5zZWFyY2hCb3gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5jb250cm9sQ29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jb250cm9sQ29udGFpbmVyKTtcbiAgICB9XG59XG4iLCJleHBvcnQgdHlwZSBQaG90b25SZXF1ZXN0T3B0aW9ucyA9IHtcbiAgcTogc3RyaW5nLFxuICBsaW1pdD86IG51bWJlcixcbiAgbG9uPzogbnVtYmVyLFxuICBsYXQ/OiBudW1iZXIsXG4gIHpvb20/OiBudW1iZXIsXG4gIGxvY2F0aW9uRm9yQmlhcz86IG51bWJlcixcbiAgc2NhbGU/OiBudW1iZXIsXG4gIGxhbmd1YWdlPzogc3RyaW5nLFxuICBiYm94PzogbnVtYmVyW10sXG4gIGRlYnVnPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGhvdG9uUmVxdWVzdCB7XG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKSB7XG4gICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICBhc3luYyByZXF1ZXN0KHBhcmFtczogUGhvdG9uUmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMudXJsfSR7T2JqZWN0LmtleXMocGFyYW1zKS5tYXAoKGspID0+IGAke2t9PSR7cGFyYW1zW2tdfWApLmpvaW4oJyYnKX1gO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEdlb0pTT04uRmVhdHVyZUNvbGxlY3Rpb24+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJhdyA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICBjb25zdCBnZW9qc29uID0gSlNPTi5wYXJzZShyYXcpO1xuICAgICAgICAgICAgcmVzb2x2ZShnZW9qc29uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KHhoci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudERhdGEsIE1hcCBhcyBNYXBib3hNYXAgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IFBob3RvblJlcXVlc3QsIHsgUGhvdG9uUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL3Bob3Rvbi1yZXF1ZXN0JztcbmltcG9ydCBQb3B1cE1hbmFnZXIgZnJvbSAnLi9wb3B1cC1tYW5hZ2VyJztcblxuZXhwb3J0IHR5cGUgUGhvdG9uT3B0aW9ucyA9IHtcbiAgICB1cmw/OiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgbWluQ2hhcj86IG51bWJlcjtcbiAgICBsaW1pdD86IDU7XG4gICAgc3VibWl0RGVsYXk/OiBudW1iZXI7XG4gICAgaW5jbHVkZVBvc2l0aW9uPzogYm9vbGVhbjtcbiAgICBiYm94PzogbnVtYmVyW10gfCBudWxsO1xuICAgIG5vUmVzdWx0TGFiZWw/OiBzdHJpbmcsXG4gICAgZmVlZGJhY2tVcmw/OiBzdHJpbmcsXG4gICAgZmVlZGJhY2tMYWJlbD86IHN0cmluZyxcbiAgICB3aWR0aD86IG51bWJlcixcbiAgICBwb3B1cFpvb21MZXZlbD86IG51bWJlcixcbiAgICBjcmVhdGVDb250ZW50PzogRnVuY3Rpb24sXG59XG5cbnR5cGUgQ2hvaWNlID0ge1xuICBmZWF0dXJlOiBHZW9KU09OLkZlYXR1cmUsXG4gIGVsOiBIVE1MTElFbGVtZW50LFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaG90b25TZWFyY2gge1xuICAgIHByaXZhdGUgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIHJlc3VsdHNDb250YWluZXI6IEhUTUxVTGlzdEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIG1hcDogTWFwYm94TWFwO1xuXG4gICAgcHJpdmF0ZSBwb3B1cE1hbmFnZXI6IFBvcHVwTWFuYWdlcjtcblxuICAgIHByaXZhdGUgb3B0aW9uczogUGhvdG9uT3B0aW9ucyA9IHtcbiAgICAgIHVybDogJ2h0dHBzOi8vcGhvdG9uLmtvbW9vdC5pby9hcGk/JyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnU3RhcnQgdHlwaW5nLi4uJyxcbiAgICAgIG1pbkNoYXI6IDMsXG4gICAgICBsaW1pdDogNSxcbiAgICAgIHN1Ym1pdERlbGF5OiAzMDAsXG4gICAgICBpbmNsdWRlUG9zaXRpb246IHRydWUsXG4gICAgICBiYm94OiBudWxsLFxuICAgICAgbm9SZXN1bHRMYWJlbDogJ05vIHJlc3VsdCcsXG4gICAgICBmZWVkYmFja1VybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rb21vb3QvcGhvdG9uL2lzc3VlcycsXG4gICAgICBmZWVkYmFja0xhYmVsOiAnRmVlZGJhY2snLFxuICAgICAgcG9wdXBab29tTGV2ZWw6IDE0LFxuICAgICAgY3JlYXRlQ29udGVudDogdW5kZWZpbmVkLFxuICAgIH1cblxuICAgIHByaXZhdGUgc3VibWl0RGVsYXk6IG51bWJlciB8IG51bGw7XG5cbiAgICBwcml2YXRlIENBQ0hFOiBzdHJpbmcgPSAnJztcblxuICAgIHByaXZhdGUgUkVTVUxUUzogQ2hvaWNlW10gPSBbXTtcblxuICAgIHByaXZhdGUgX0NVUlJFTlQ6IG51bWJlcjtcblxuICAgIHByaXZhdGUgZ2V0IENVUlJFTlQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9DVVJSRU5UO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0IENVUlJFTlQoaW5kZXgpIHtcbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGluZGV4ID0gdGhpcy5yZXN1bHRUb0luZGV4KGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX0NVUlJFTlQgPSBpbmRleDtcbiAgICB9XG5cbiAgICBwcml2YXRlIEtFWVMgPSB7XG4gICAgICBMRUZUOiAzNyxcbiAgICAgIFVQOiAzOCxcbiAgICAgIFJJR0hUOiAzOSxcbiAgICAgIERPV046IDQwLFxuICAgICAgVEFCOiA5LFxuICAgICAgUkVUVVJOOiAxMyxcbiAgICAgIEVTQzogMjcsXG4gICAgICBBUFBMRTogOTEsXG4gICAgICBTSElGVDogMTYsXG4gICAgICBBTFQ6IDE3LFxuICAgICAgQ1RSTDogMTgsXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIG1hcDogTWFwYm94TWFwLCBvcHRpb25zOiBQaG90b25PcHRpb25zKSB7XG4gICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucG9wdXBNYW5hZ2VyID0gbmV3IFBvcHVwTWFuYWdlcihcbiAgICAgICAgbWFwLFxuICAgICAgICB0aGlzLm9wdGlvbnMucG9wdXBab29tTGV2ZWwsXG4gICAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVDb250ZW50LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgdGhpcy5pbnB1dC50eXBlID0gJ3NlYXJjaCc7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyKSB0aGlzLmlucHV0LnBsYWNlaG9sZGVyID0gdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyO1xuICAgICAgdGhpcy5pbnB1dC5hdXRvY29tcGxldGUgPSAnb2ZmJztcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaW5wdXQuYXV0b2NvcnJlY3QgPSAnb2ZmJztcbiAgICAgIHRoaXMuaW5wdXQuY2xhc3NMaXN0LmFkZCgncGhvdG9uLWlucHV0Jyk7XG4gICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLm9uSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmNyZWF0ZVJlc3VsdHNDb250YWluZXIoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVJlc3VsdHNDb250YWluZXIoKSB7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Bob3Rvbi1hdXRvY29tcGxldGUnKTtcbiAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICBib2R5Py5hcHBlbmRDaGlsZCh0aGlzLnJlc3VsdHNDb250YWluZXIpO1xuICAgIH1cblxuICAgIHJlc2l6ZUNvbnRhaW5lcigpIHtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLmdldExlZnQodGhpcy5pbnB1dCk7XG4gICAgICBjb25zdCB0ID0gdGhpcy5nZXRUb3AodGhpcy5pbnB1dCkgKyB0aGlzLmlucHV0Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUubGVmdCA9IGAke2x9cHhgO1xuICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGAke3R9cHhgO1xuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLm9wdGlvbnMud2lkdGggPyB0aGlzLm9wdGlvbnMud2lkdGggOiB0aGlzLmlucHV0Lm9mZnNldFdpZHRoIC0gMjtcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uS2V5RG93bihlOiBFdmVudERhdGEpOiB2b2lkIHtcbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgdGhpcy5LRVlTLlRBQjpcbiAgICAgICAgICBpZiAodGhpcy5DVVJSRU5UICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRoaXMuS0VZUy5SRVRVUk46XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRoaXMuS0VZUy5FU0M6XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0aGlzLktFWVMuRE9XTjpcbiAgICAgICAgICBpZiAodGhpcy5SRVNVTFRTLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLkNVUlJFTlQgIT09IG51bGwgJiYgdGhpcy5DVVJSRU5UIDwgdGhpcy5SRVNVTFRTLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgdGhpcy5DVVJSRU5UICs9IDE7XG4gICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ1VSUkVOVCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLkNVUlJFTlQgPSAwO1xuICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0aGlzLktFWVMuVVA6XG4gICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCAmJiB0aGlzLlJFU1VMVFMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuQ1VSUkVOVCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5DVVJSRU5UIC09IDE7XG4gICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ1VSUkVOVCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uSW5wdXQoKTogdm9pZCB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuc3VibWl0RGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5zdWJtaXREZWxheSk7XG4gICAgICAgIHRoaXMuc3VibWl0RGVsYXkgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5zdWJtaXREZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuc2VhcmNoLmJpbmQodGhpcyksIHRoaXMub3B0aW9ucy5zdWJtaXREZWxheSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkJsdXIoKTogdm9pZCB7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZWxmLmhpZGUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZvY3VzKCkge1xuICAgICAgdGhpcy5pbnB1dC5zZWxlY3QoKTtcbiAgICAgIHRoaXMuc2VhcmNoKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhcigpIHtcbiAgICAgIHRoaXMuUkVTVUxUUyA9IFtdO1xuICAgICAgdGhpcy5DVVJSRU5UID0gMDtcbiAgICAgIHRoaXMuQ0FDSEUgPSAnJztcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGhpZGUoKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENob2ljZSgpIHtcbiAgICAgIGNvbnN0IGNob2ljZTogQ2hvaWNlID0gdGhpcy5SRVNVTFRTW3RoaXMuQ1VSUkVOVF07XG4gICAgICBpZiAoY2hvaWNlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLm9uU2VsZWN0ZWQoY2hvaWNlKTtcbiAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2VhcmNoKCkge1xuICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XG4gICAgICBjb25zdCB6b29tID0gdGhpcy5tYXAuZ2V0Wm9vbSgpID8gdGhpcy5tYXA/LmdldFpvb20oKSA6IDE0O1xuICAgICAgY29uc3QgdmFsID0gdGhpcy5pbnB1dC52YWx1ZTtcbiAgICAgIGNvbnN0IG1pbkNoYXIgPSAodGhpcy5vcHRpb25zLm1pbkNoYXIgJiYgdmFsLmxlbmd0aCA+PSB0aGlzLm9wdGlvbnMubWluQ2hhcik7XG4gICAgICBpZiAoIXZhbCB8fCAhbWluQ2hhcikge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXJsICYmIGAke3ZhbH0nJ2AgIT09IGAke3RoaXMuQ0FDSEV9JydgKSB7XG4gICAgICAgIHRoaXMuQ0FDSEUgPSB2YWw7XG4gICAgICAgIGNvbnN0IGFqYXggPSBuZXcgUGhvdG9uUmVxdWVzdCh0aGlzLm9wdGlvbnMudXJsKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogUGhvdG9uUmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICAgICAgcTogdmFsLFxuICAgICAgICAgIGxpbWl0OiB0aGlzLm9wdGlvbnMubGltaXQsXG4gICAgICAgICAgem9vbTogTWF0aC5mbG9vcih6b29tKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmNsdWRlUG9zaXRpb24pIHtcbiAgICAgICAgICBvcHRpb25zLmxhdCA9IGNlbnRlcj8ubGF0O1xuICAgICAgICAgIG9wdGlvbnMubG9uID0gY2VudGVyPy5sbmc7XG4gICAgICAgIH1cbiAgICAgICAgYWpheC5yZXF1ZXN0KG9wdGlvbnMpLnRoZW4odGhpcy5oYW5kbGVSZXN1bHQuYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdGVkKGNob2ljZTogQ2hvaWNlKSB7XG4gICAgICB0aGlzLnBvcHVwTWFuYWdlci5hZGQoY2hvaWNlLmZlYXR1cmUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0UmVzdWx0KGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSwgZWw6IEhUTUxMSUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICBjb25zdCBkZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc21hbGwnKTtcbiAgICAgIGVsLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xuICAgICAgY29uc3QgZGV0YWlsczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmZvcm1hdFR5cGUoZmVhdHVyZSk7XG4gICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzPy5uYW1lKSB7XG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IGZlYXR1cmUucHJvcGVydGllcy5uYW1lO1xuICAgICAgfSBlbHNlIGlmIChmZWF0dXJlLnByb3BlcnRpZXM/LmhvdXNlbnVtYmVyKSB7XG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IGZlYXR1cmUucHJvcGVydGllcy5ob3VzZW51bWJlcjtcbiAgICAgICAgaWYgKGZlYXR1cmUucHJvcGVydGllcy5zdHJlZXQpIHtcbiAgICAgICAgICB0aXRsZS5pbm5lckhUTUwgKz0gYCAke2ZlYXR1cmUucHJvcGVydGllcy5zdHJlZXR9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUpIGRldGFpbHMucHVzaCh0eXBlKTtcbiAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXM/LmNpdHkgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLmNpdHkgIT09IGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSB7XG4gICAgICAgIGRldGFpbHMucHVzaChmZWF0dXJlLnByb3BlcnRpZXMuY2l0eSk7XG4gICAgICB9XG4gICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzPy5jb3VudHJ5KSBkZXRhaWxzLnB1c2goZmVhdHVyZS5wcm9wZXJ0aWVzLmNvdW50cnkpO1xuICAgICAgZGV0YWlsc0NvbnRhaW5lci5pbm5lckhUTUwgPSBkZXRhaWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRUeXBlKGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSkge1xuICAgICAgcmV0dXJuIGZlYXR1cmUucHJvcGVydGllcz8ub3NtX3ZhbHVlID09PSAneWVzJ1xuICAgICAgICA/IGZlYXR1cmUucHJvcGVydGllcy5vc21fa2V5XG4gICAgICAgIDogZmVhdHVyZS5wcm9wZXJ0aWVzPy5vc21fdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVSZXN1bHQoZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlKSB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgdGhpcy5mb3JtYXRSZXN1bHQoZmVhdHVyZSwgZWwpO1xuICAgICAgY29uc3QgcmVzdWx0OiBDaG9pY2UgPSB7XG4gICAgICAgIGZlYXR1cmUsXG4gICAgICAgIGVsLFxuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMub25Nb3VzZW92ZXIuYmluZCh0aGlzLCByZXN1bHQpKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZWRvd24uYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZW92ZXIocmVzdWx0KSB7XG4gICAgICB0aGlzLkNVUlJFTlQgPSByZXN1bHQ7XG4gICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZWRvd24oKSB7XG4gICAgICB0aGlzLnNldENob2ljZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdWx0VG9JbmRleChyZXN1bHQpIHtcbiAgICAgIGxldCBvdXQgPSAwO1xuICAgICAgdGhpcy5SRVNVTFRTLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpdGVtID09PSByZXN1bHQpIHtcbiAgICAgICAgICBvdXQgPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlUmVzdWx0KGdlb2pzb246IEdlb0pTT04uRmVhdHVyZUNvbGxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcbiAgICAgIGdlb2pzb24uZmVhdHVyZXMuZm9yRWFjaCgoZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlKSA9PiB7XG4gICAgICAgIHNlbGYuUkVTVUxUUy5wdXNoKHNlbGYuY3JlYXRlUmVzdWx0KGZlYXR1cmUpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGdlb2pzb24uZmVhdHVyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IG5vcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbm9yZXN1bHQuY2xhc3NMaXN0LmFkZCgncGhvdG9uLW5vLXJlc3VsdCcpO1xuICAgICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuYXBwZW5kQ2hpbGQobm9yZXN1bHQpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5vUmVzdWx0TGFiZWwpIG5vcmVzdWx0LmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5ub1Jlc3VsdExhYmVsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mZWVkYmFja1VybCkge1xuICAgICAgICBjb25zdCBmZWVkYmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZmVlZGJhY2suY2xhc3NMaXN0LmFkZCgncGhvdG9uLWZlZWRiYWNrJyk7XG4gICAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmZWVkYmFjayk7XG4gICAgICAgIGZlZWRiYWNrLmhyZWYgPSBgJHt0aGlzLm9wdGlvbnMuZmVlZGJhY2tVcmx9YDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mZWVkYmFja0xhYmVsKSBmZWVkYmFjay5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuZmVlZGJhY2tMYWJlbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuQ1VSUkVOVCA9IDA7XG4gICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGlnaGxpZ2h0KCkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLlJFU1VMVFMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBzZWxmLkNVUlJFTlQpIHtcbiAgICAgICAgICBpdGVtLmVsLmNsYXNzTGlzdC5hZGQoJ29uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbS5lbC5jbGFzc0xpc3QucmVtb3ZlKCdvbicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExlZnQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICBsZXQgdG1wID0gZWwub2Zmc2V0TGVmdDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIHRtcCArPSBlbC5vZmZzZXRMZWZ0O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRtcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRvcChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCB0bXAgPSBlbC5vZmZzZXRUb3A7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBlbCA9IGVsLm9mZnNldFBhcmVudDtcbiAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICB0bXAgKz0gZWwub2Zmc2V0VG9wO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRtcDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBNYXAgYXMgTWFwYm94TWFwLCBQb3B1cCwgTWFya2VyIH0gZnJvbSAnbWFwYm94LWdsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBNYW5hZ2VyIHtcbiAgICBwcml2YXRlIG1hcDogTWFwYm94TWFwXG5cbiAgICBwcml2YXRlIG1hcmtlcjogTWFya2VyIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIHpvb206IG51bWJlcjtcblxuICAgIHByaXZhdGUgY3JlYXRlQ29udGVudEZ1bmN0aW9uOiBGdW5jdGlvbiB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwYm94TWFwLCB6b29tOiBudW1iZXIgPSAxNCwgY3JlYXRlQ29udGVudD86IEZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgIHRoaXMuem9vbSA9IHpvb207XG4gICAgICB0aGlzLmNyZWF0ZUNvbnRlbnRGdW5jdGlvbiA9IGNyZWF0ZUNvbnRlbnQ7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNvbnRlbnQoZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlKSA6IHN0cmluZyB7XG4gICAgICBjb25zdCBwcm9wcyA9IGZlYXR1cmUucHJvcGVydGllcztcbiAgICAgIGlmICghcHJvcHMpIHJldHVybiAnJztcbiAgICAgIGxldCBjb250ZW50ID0gJyc7XG4gICAgICBpZiAocHJvcHMubmFtZSkge1xuICAgICAgICBjb250ZW50ID0gcHJvcHMubmFtZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRldGFpbHM6IHN0cmluZ1tdID0gW107XG4gICAgICBbJ2hvdXNlbnVtYmVyJywgJ3N0cmVldCcsICdsb2NhbGl0eScsICdjaXR5JywgJ2Rpc3RyaWN0JywgJ3N0YXRlJywgJ3Bvc3Rjb2RlJywgJ2NvdW50cnknXS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaChwcm9wc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZGV0YWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gYFxuICAgICAgICA8YnI+XG4gICAgICAgICR7ZGV0YWlscy5qb2luKCcsJyl9XG4gICAgICAgIGA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG5cbiAgICBjcmVhdGVDb250ZW50KGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSkge1xuICAgICAgcmV0dXJuICh0aGlzLmNyZWF0ZUNvbnRlbnRGdW5jdGlvbilcbiAgICAgICAgPyB0aGlzLmNyZWF0ZUNvbnRlbnRGdW5jdGlvbihmZWF0dXJlKVxuICAgICAgICA6IHRoaXMuX2NyZWF0ZUNvbnRlbnQoZmVhdHVyZSk7XG4gICAgfVxuXG4gICAgYWRkKGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZSkge1xuICAgICAgY29uc3QgcG9wdXAgPSBuZXcgUG9wdXAoKVxuICAgICAgICAuc2V0SFRNTCh0aGlzLmNyZWF0ZUNvbnRlbnQoZmVhdHVyZSkpXG4gICAgICAgIC5zZXRNYXhXaWR0aCgnMzAwcHgnKTtcbiAgICAgIGlmICh0aGlzLm1hcmtlcikge1xuICAgICAgICB0aGlzLm1hcmtlci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGxuZ0xhdCA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICB0aGlzLm1hcmtlciA9IG5ldyBNYXJrZXIoKVxuICAgICAgICAuc2V0TG5nTGF0KGxuZ0xhdClcbiAgICAgICAgLnNldFBvcHVwKHBvcHVwKVxuICAgICAgICAuYWRkVG8odGhpcy5tYXApO1xuICAgICAgdGhpcy5tYXJrZXIudG9nZ2xlUG9wdXAoKTtcbiAgICAgIGxldCBjdXJyZW50Wm9vbSA9IHRoaXMubWFwLmdldFpvb20oKTtcbiAgICAgIGlmIChjdXJyZW50Wm9vbSA8IHRoaXMuem9vbSkge1xuICAgICAgICBjdXJyZW50Wm9vbSA9IHRoaXMuem9vbTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWFwLmZseVRvKHtcbiAgICAgICAgY2VudGVyOiBsbmdMYXQsXG4gICAgICAgIHpvb206IGN1cnJlbnRab29tLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICB0aGlzLm1hcmtlcj8ucmVtb3ZlKCk7XG4gICAgICB0aGlzLm1hcmtlciA9IG51bGw7XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBtYXBib3hnbDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IG1hcGJveGdsIGZyb20gJ21hcGJveC1nbCc7XG5pbXBvcnQgTWFwYm94UGhvdG9uR2VvY29kZXIgZnJvbSAnLi4vbGliL2luZGV4JztcbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4oKCk9PntcbiAgICAvLyBtYXBib3hnbC5hY2Nlc3NUb2tlbj0neW91ciBtYXBib3ggYWNjZXNzIHRva2VuJ1xuICAgIGNvbnN0IG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgICBjb250YWluZXI6ICdtYXAnLFxuICAgICAgICAvLyBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnLFxuICAgICAgICBzdHlsZTonaHR0cHM6Ly9uYXJ3YXNzY28uZ2l0aHViLmlvL21hcGJveC1zdHlsZWZpbGVzL3VudnQvc3R5bGUuanNvbicsXG4gICAgICAgIGNlbnRlcjogWzM1Ljg3MDYzLCAtMS4wODU1MV0sXG4gICAgICAgIHpvb206IDEyLFxuICAgICAgICBoYXNoOnRydWUsXG4gICAgfSk7XG4gICAgbWFwLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCksICd0b3AtcmlnaHQnKTtcbiAgICBtYXAuYWRkQ29udHJvbChuZXcgTWFwYm94UGhvdG9uR2VvY29kZXIoKSwgJ3RvcC1sZWZ0Jyk7XG59KSgpIl0sInNvdXJjZVJvb3QiOiIifQ==