(()=>{"use strict";var t,e,n,o,i,s,r={170:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),i=n.n(o),s=n(645),r=n.n(s)()(i());r.push([t.id,'.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}',"",{version:3,sources:["webpack://./css/styles.css"],names:[],mappings:"AAAA;;IAEI,uBAAuB;IACvB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,wEAAwE;IACxE,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,kBAAkB;IAClB,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,6BAA6B;IAC7B,aAAa;IACb,wEAAwE;IACxE,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;IAChB,wEAAwE;AAC5E;AACA;IACI,cAAc;AAClB;AACA;IACI,yBAAyB;IACzB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,0BAA0B;AAC9B;AACA;IACI,YAAY;AAChB",sourcesContent:['.mapboxgl-ctrl-group .mapboxgl-geocoder-ctrl\n{\n    background: transparent;\n    border: none;\n    display: block;\n}\n\n.photon-input {\n    font-size: 18px;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    width: 200px;\n    height: 30px;\n    z-index: 1;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\nul.photon-autocomplete {\n    position: relative;\n    background-color: white;\n    z-index: 1000;\n    box-shadow: 0 4px 9px #999999;\n    display: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n    padding-inline-start: 0px;\n}\n.photon-autocomplete li {\n    min-height: 30px;\n    line-height: 1em;\n    padding: 5px 10px;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.8em;\n    display: list-item;\n    list-style: none;\n    font-family: "Open Sans", "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n.photon-autocomplete li strong {\n    display: block;\n}\n.photon-autocomplete li.on {\n    background-color: #cfcfcf;\n    cursor: pointer;\n}\n.photon-autocomplete li.photon-no-result {\n    text-align: center;\n    color: #666;\n    font-size: 0.9em;\n    line-height: 30px;\n}\n.photon-autocomplete .photon-feedback {\n    display: block;\n    text-align: right;\n    font-size: 0.8em;\n    padding: 3px;\n    color: #999;\n    border-top: 1px solid #eee;\n}\n.photon-input:focus {\n    width: 400px;\n}'],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(o)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(i[r]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);o&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,i=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var o,i,s=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(o=n.next()).done)&&(s.push(o.value),!e||s.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw i}}return s}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=i[1],r=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),h=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[s].concat(h).concat([c]).join("\n")}return[s].join("\n")}},379:(t,e,n)=>{var o,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function r(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],i=0;i<t.length;i++){var a=t[i],l=e.base?a[0]+e.base:a[0],c=n[l]||0,h="".concat(l," ").concat(c);n[l]=c+1;var p=r(h),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(s[p].references++,s[p].updater(u)):s.push({identifier:h,updater:A(u,e),references:1}),o.push(h)}return o}function l(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var s=n.nc;s&&(o.nonce=s)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var r=i(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var s=document.createTextNode(i),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function u(t,e,n){var o=n.css,i=n.media,s=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,f=0;function A(t,e){var n,o,i;if(e.singleton){var s=f++;n=d||(d=l(e)),o=p.bind(null,n,s,!1),i=p.bind(null,n,s,!0)}else n=l(e),o=u.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=r(n[o]);s[i].references--}for(var l=a(t,e),c=0;c<n.length;c++){var h=r(n[c]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}n=l}}}},620:(t,e,n)=>{const o=n(173);e.Z=o.default},173:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(119),i=n(64);e.default=class{constructor(t={},e={}){this.searchOptions=t,this.popupOptions=e}getDefaultPosition(){return"top-left"}onAdd(t){return this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.searchBox=document.createElement("input"),this.controlContainer.appendChild(this.searchBox),this.popupManager=new i.default(t,this.popupOptions),this.searchOptions.onSelected||(this.searchOptions.onSelected=this.onSelected.bind(this)),this.photonSearch=new o.default(this.searchBox,this.map,this.searchOptions),this.photonSearch.initialize(),this.controlContainer}onSelected(t){this.popupManager.add(t.feature)}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.searchBox&&this.controlContainer.parentNode.removeChild(this.controlContainer)}}},437:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,s){function r(t){try{l(o.next(t))}catch(t){s(t)}}function a(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.url=t}request(t){return n(this,void 0,void 0,(function*(){const e=`${this.url}${Object.keys(t).map((e=>`${e}=${t[e]}`)).join("&")}`;return new Promise(((t,n)=>{const o=new XMLHttpRequest;o.open("GET",e),o.onload=()=>{if(200===o.status){const e=o.responseText,n=JSON.parse(e);t(n)}else n(o.statusText)},o.send()}))}))}}},119:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(437);e.default=class{constructor(t,e,n){this.options={url:"https://photon.komoot.io/api?",placeholder:"Start typing...",minChar:3,limit:5,osm_tag:void 0,submitDelay:300,includePosition:!0,bbox:null,noResultLabel:"No result",feedbackUrl:"https://github.com/komoot/photon/issues",feedbackLabel:"Feedback",onSelected:void 0},this.CACHE="",this.RESULTS=[],this.KEYS={LEFT:37,UP:38,RIGHT:39,DOWN:40,TAB:9,RETURN:13,ESC:27,APPLE:91,SHIFT:16,ALT:17,CTRL:18},this.input=t,this.map=e,n&&(this.options=Object.assign(this.options,n))}get CURRENT(){return this._CURRENT}set CURRENT(t){"object"==typeof t&&(t=this.resultToIndex(t)),this._CURRENT=t}initialize(){this.input.type="search",this.options.placeholder&&(this.input.placeholder=this.options.placeholder),this.input.autocomplete="off",this.input.autocorrect="off",this.input.classList.add("photon-input"),this.input.addEventListener("keydown",this.onKeyDown.bind(this)),this.input.addEventListener("input",this.onInput.bind(this)),this.input.addEventListener("blur",this.onBlur.bind(this)),this.input.addEventListener("focus",this.onFocus.bind(this)),this.createResultsContainer()}createResultsContainer(){this.resultsContainer=document.createElement("ul"),this.resultsContainer.classList.add("photon-autocomplete");const t=document.querySelector("body");null==t||t.appendChild(this.resultsContainer)}resizeContainer(){const t=this.getLeft(this.input),e=this.getTop(this.input)+this.input.offsetHeight/2;this.resultsContainer.style.left=`${t}px`,this.resultsContainer.style.top=`${e}px`;const n=this.options.width?this.options.width:this.input.offsetWidth-2;this.resultsContainer.style.width=`${n}px`}onKeyDown(t){switch(t.keyCode){case this.KEYS.TAB:null!==this.CURRENT&&this.setChoice(),t.stopPropagation();break;case this.KEYS.RETURN:t.stopPropagation(),this.setChoice();break;case this.KEYS.ESC:t.stopPropagation(),this.hide(),this.input.blur();break;case this.KEYS.DOWN:this.RESULTS.length>0&&(null!==this.CURRENT&&this.CURRENT<this.RESULTS.length-1?(this.CURRENT+=1,this.highlight()):null===this.CURRENT&&(this.CURRENT=0,this.highlight()));break;case this.KEYS.UP:this.CURRENT&&t.stopPropagation(),this.CURRENT&&this.RESULTS.length>0&&(this.CURRENT>0?(this.CURRENT-=1,this.highlight()):0===this.CURRENT&&this.highlight())}}onInput(){"number"==typeof this.submitDelay&&(window.clearTimeout(this.submitDelay),this.submitDelay=null),this.submitDelay=window.setTimeout(this.search.bind(this),this.options.submitDelay)}onBlur(){const t=this;setTimeout((()=>{t.hide()}),100)}onFocus(){this.input.select(),this.search()}clear(){this.RESULTS=[],this.CURRENT=0,this.CACHE="",this.resultsContainer.innerHTML=""}hide(){this.clear(),this.resultsContainer.style.display="none"}setChoice(){const t=this.RESULTS[this.CURRENT];t&&(this.hide(),this.onSelected(t),this.input.value="")}search(){var t;const e=this.map.getCenter(),n=this.map.getZoom()?null===(t=this.map)||void 0===t?void 0:t.getZoom():14,i=this.input.value,s=this.options.minChar&&i.length>=this.options.minChar;if(i&&s){if(this.options.url&&`${i}''`!=`${this.CACHE}''`){this.CACHE=i;const t=new o.default(this.options.url),s={q:i,limit:this.options.limit,zoom:Math.floor(n)};this.options.includePosition&&(s.lat=null==e?void 0:e.lat,s.lon=null==e?void 0:e.lng),this.options.osm_tag&&(s.osm_tag=this.options.osm_tag),t.request(s).then(this.handleResult.bind(this))}}else this.clear()}_onSelected(t){}onSelected(t){this.options.onSelected?this.options.onSelected(t):this._onSelected(t)}formatResult(t,e){var n,o,i,s;const r=document.createElement("strong");e.appendChild(r);const a=document.createElement("small");e.appendChild(a);const l=[],c=this.formatType(t);(null===(n=t.properties)||void 0===n?void 0:n.name)?r.innerHTML=t.properties.name:(null===(o=t.properties)||void 0===o?void 0:o.housenumber)&&(r.innerHTML=t.properties.housenumber,t.properties.street&&(r.innerHTML+=` ${t.properties.street}`)),c&&l.push(c),(null===(i=t.properties)||void 0===i?void 0:i.city)&&t.properties.city!==t.properties.name&&l.push(t.properties.city),(null===(s=t.properties)||void 0===s?void 0:s.country)&&l.push(t.properties.country),a.innerHTML=l.join(", ")}formatType(t){var e,n;return"yes"===(null===(e=t.properties)||void 0===e?void 0:e.osm_value)?t.properties.osm_key:null===(n=t.properties)||void 0===n?void 0:n.osm_value}createResult(t){const e=document.createElement("li");this.resultsContainer.appendChild(e),this.formatResult(t,e);const n={feature:t,el:e};return e.addEventListener("mouseover",this.onMouseover.bind(this,n)),e.addEventListener("mousedown",this.onMousedown.bind(this)),n}onMouseover(t){this.CURRENT=t,this.highlight()}onMousedown(){this.setChoice()}resultToIndex(t){let e=0;return this.RESULTS.forEach(((n,o)=>{n===t&&(e=o)})),e}handleResult(t){const e=this;if(this.clear(),this.resultsContainer.style.display="block",this.resizeContainer(),t.features.forEach((t=>{e.RESULTS.push(e.createResult(t))})),0===t.features.length){const t=document.createElement("li");t.classList.add("photon-no-result"),this.resultsContainer.appendChild(t),this.options.noResultLabel&&(t.innerHTML=this.options.noResultLabel)}if(this.options.feedbackUrl){const t=document.createElement("a");t.classList.add("photon-feedback"),this.resultsContainer.appendChild(t),t.href=`${this.options.feedbackUrl}`,this.options.feedbackLabel&&(t.innerHTML=this.options.feedbackLabel)}this.CURRENT=0,this.highlight()}highlight(){const t=this;this.RESULTS.forEach(((e,n)=>{n===t.CURRENT?e.el.classList.add("on"):e.el.classList.remove("on")}))}getLeft(t){let e=t.offsetLeft;for(t=t.offsetParent;t;)e+=t.offsetLeft,t=t.offsetParent;return e}getTop(t){let e=t.offsetTop;for(t=t.offsetParent;t;)e+=t.offsetTop,t=t.offsetParent;return e}}},64:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n(507);e.default=class{constructor(t,e={}){this.marker=null,this.map=t,this.options=e}_createContent(t){const e=t.properties;if(!e)return"";let n="";e.name&&(n=e.name);const o=[];return["housenumber","street","locality","city","district","state","postcode","country"].forEach((t=>{e[t]&&o.push(e[t])})),o.length>0&&(n+=`\n        <br>\n        ${o.join(",")}\n        `),n}createContent(t){return this.options.createContent?this.options.createContent(t):this._createContent(t)}add(t){const e=(new o.Popup).setHTML(this.createContent(t)).setMaxWidth("300px");this.marker&&this.marker.remove();const n=t.geometry.coordinates;this.marker=(new o.Marker).setLngLat(n).setPopup(e).addTo(this.map),this.marker.togglePopup();let i=this.map.getZoom();const s=this.options.popupZoomLevel?this.options.popupZoomLevel:14;i<s&&(i=s),this.map.flyTo({center:n,zoom:i})}clear(){var t;null===(t=this.marker)||void 0===t||t.remove(),this.marker=null}}},507:t=>{t.exports=mapboxgl}},a={};function l(t){var e=a[t];if(void 0!==e)return e.exports;var n=a[t]={id:t,exports:{}};return r[t].call(n.exports,n,n.exports,l),n.exports}l.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return l.d(e,{a:e}),e},l.d=(t,e)=>{for(var n in e)l.o(e,n)&&!l.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},l.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=l(507),e=l.n(t),n=l(620),o=l(379),i=l.n(o),s=l(170),i()(s.Z,{insert:"head",singleton:!1}),s.Z.locals,(()=>{const t=new(e().Map)({container:"map",style:"https://narwassco.github.io/naru/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new n.Z,"top-left")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,